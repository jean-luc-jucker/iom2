ID_1 != "NE1022X002609" & ID_1 != "SN1020001566" & ID_1 != "TD1021001049" &
ID_1 != "TD1021001245" & ID_1 != "TD1021001356" & ID_1 != "TD1021001444" &
ID_1 != "TD1021001618" & ID_1 != "TD1022001065" & ID_1 != "TD1022001219" &
ID_1 != "TN1018001384" & ID_1 != "TN1020001880" & ID_1 != "TN1021002294"
| is.na(ID_1))
dim(res) # 1998
# This is 2,211 - 213 = 1,998 indeed
# Furthermore, we have 2,073 - 1,998 =  75 less participants than in initial data indeed!
# That said... we still have an issue!
# Some respondents who are men in Kobo are women in Mimosa:
res[res$Gender == 'Masculin' & res$Gender_Mimosa == 'Female' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa), ] # 14
# And respondents who are women in Kobo are men in Mimosa:
res[res$Gender == 'Féminin' & res$Gender_Mimosa == 'Male' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa), ] # 16
# Save these cases
gender_issue <- res[((res$Gender == 'Masculin' & res$Gender_Mimosa == 'Female' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa)) | (res$Gender == 'Féminin' & res$Gender_Mimosa == 'Male' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa))), ]
write_excel_csv(gender_issue, 'data_clean/res_training_to_resolve_gender.csv')
# After discussion with client, who cannot explain this, we decide to remove these
# 30 cases
res <- res[!((res$Gender == 'Masculin' & res$Gender_Mimosa == 'Female' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa)) | (res$Gender == 'Féminin' & res$Gender_Mimosa == 'Male' & !is.na(res$Gender) & !is.na(res$Gender_Mimosa))), ]
dim(res) # 1968 x 31
# Indeed, 1998 - 30 = 1968 indeed
str(res)
# Compute last needed variable, which is
# Délai entre la réception de l'assistance te le jour de l'enquête
# Mimosa: Date de réception de la réintégration # --> ReintegrationDate
# Kobo: Date de l'enquête # --> InterviewDate
# DONE, new name ---> AssistanceDuration
res  <- res %>% mutate(AssistanceDuration =
as.numeric(difftime(InterviewDate, ReintegrationDate, units = "days")))
dim(res) # 1968 x 32, as expected
# Subset to only variables we'll need
res  <- res %>% select(-c(Gender_Mimosa, AgeAtReferral_Mimosa))
dim(res) # 1,968 x 30
# Export
write_excel_csv(res, 'data_clean/res_training.csv')
# RDS version
saveRDS(res, file = 'data_clean/res_training.rds')
# Recode independent variables
# Print counts
res %>% group_by(BusinessSuccess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
res %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
res %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
res <- res %>% mutate(
BusinessSuccess =
case_when(BusinessSuccess == 'Actuellement ouvert et les activités marchent bien' ~ 'High',
BusinessSuccess != 'Actuellement ouvert et les activités marchent bien' ~ 'Low'),
BusinessProfitability =
case_when(BusinessProfitability == 'Oui' ~ 'High',
BusinessProfitability != 'Oui' ~ 'Low'),
WouldMigrateAgain =
case_when(WouldMigrateAgain == 'Non' ~ 'No',
WouldMigrateAgain != 'Non' ~ 'Yes')
)
# Reprint counts
res %>% group_by(BusinessSuccess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
res %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
res %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
# Assess NA
colSums(is.na(res))
# Drop NA from our main variables of interest
# Dim before
dim(res) # 1968 x 30
res <- res %>% drop_na(BusinessSuccess, WouldMigrateAgain, Gender, CountryOfReturn)
# Reassess NA
colSums(is.na(res))
# New dim
dim(res) # 1892 x 30, as expected
# Recode independent variables
# Taken from preparation_res.R, with some exceptions,
# notably for Mimosa variables
names(res)
# Before
res %>% group_by(TrainingDuration) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent) %>% print(n=30)
res <- res %>% mutate(
# RECODE
InterviewType =
case_when(InterviewType == 'Par téléphone' ~ 'Par téléphone',
InterviewType != 'Par téléphone' ~ 'Terrain/bureau OIM'
),
Country =
case_when(
Country != "Sénégal" & Country != "Guinée" & Country != "Côte D'Ivoire" & Country != "Burkina Faso" & Country != "Ghana" ~ 'Autre',
TRUE ~ as.character(Country)
),
CountryOfReturn =
case_when(
CountryOfReturn != "Lybie" & CountryOfReturn != "Algerie" & CountryOfReturn != "Niger" & CountryOfReturn != "Maroc" ~ 'Autre',
TRUE ~ as.character(CountryOfReturn)
),
Gender =
case_when(
Gender == "Masculin"  ~ "Masculin",
Gender == "Féminin" ~ "Féminin" # we purposefully do not specify Refused, to convert
# it to a NA
),
AgeGroup =
case_when(
AgeGroup == "18-35 ans" ~ "14-35",
AgeGroup == "36-65 ans" ~ "36+",
AgeGroup == "14-17 ans" ~ "14-35",
AgeGroup == "+65 ans" ~ "36+"
),
BusinessType =
case_when(
BusinessType == "Commerce" ~ "Commerce",
BusinessType == "Elevage" ~ "Elevage",
BusinessType == "Transport (Moto - Auto et autres)" ~ "Transport",
BusinessType == "Agriculture" ~ "Agriculture/aviculture",
BusinessType == "Aviculture" ~ "Agriculture/aviculture",
BusinessType == "Artisan-Ouvrier" ~ "Autre",
BusinessType == "Couture" ~ "Autre",
BusinessType == "Autre" ~ "Autre",
BusinessType == "Restauration" ~ "Autre",
BusinessType == "Bâtiment/construction" ~ "Autre",
BusinessType == "Coiffure" ~ "Autre",
BusinessType == "Mécanique" ~ "Autre",
BusinessType == "Pêche" ~ "Autre"
),
BusinessMembers =
case_when(BusinessMembers != "Moi uniquement" ~ "Moi et d'autres",
TRUE ~ as.character(BusinessMembers)
),
ReceivedIOMBusinessAdvice =
case_when(
ReceivedIOMBusinessAdvice == "Non"  ~ "Non",
ReceivedIOMBusinessAdvice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Ne sait pas and Refused to NA
),
BusinessHasEmployees =
case_when(
BusinessHasEmployees == "Non"  ~ "Non",
BusinessHasEmployees == "Oui" ~ "Autre",
BusinessHasEmployees == "Souhaite ne pas répondre" ~ "Autre" # group Oui
# and Refused to avoid losing 48 respondents
),
EmployeeNumber =
case_when(EmployeeNumber == "1" ~ "1",
EmployeeNumber == "2" ~ "1+",
EmployeeNumber == "4 et plus" ~ "1+",
EmployeeNumber == "3" ~ "1+",
EmployeeNumber == "Ne souhaite pas répondre" ~ "1", # we know that
# the 6 respondents who Refused to answer replied to the previous
# question (BusinessHasEmployees) that they have employees. We decide
# to replace the refused with the most common value for respondents
# who have employees, that is, 1
),
CoronaImpactOnBusiness =
case_when(CoronaImpactOnBusiness != "Non" ~ "Oui",
TRUE ~ as.character(CoronaImpactOnBusiness)
),
FirstChoice =
case_when(
FirstChoice == "Non"  ~ "Non",
FirstChoice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Refused to NA
),
# From Mimosa--NEW
TrainingType =
case_when(
TrainingType == "Business development/management training" ~ "Business/management",
TrainingType == "NULL" ~ "None", # Decision we make
TrainingType == "Vocational training" ~ "Other",
TrainingType == "Non spécifié" ~ "Other",
TrainingType == "Other" ~ "Other", # NA are filled below
),
TrainingDuration =
case_when(
TrainingDuration == "NULL" ~ "0",
TRUE ~ as.character(TrainingDuration)
)
) %>%
# REPLACE NA
mutate(BusinessHasEmployees = replace_na(BusinessHasEmployees, "Autre"), # to avoid
# losing 48 respondents
EmployeeNumber = replace_na(EmployeeNumber, "0"), # All NA are for respondents
# who do not have employees, so we can replace NA with 0
TrainingType = replace_na(TrainingType, "None") # We decide to replace NA to None
)
# After
res %>% group_by(TrainingDuration) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
#
dim(res)
# Before we clean numeric variables, let's do a NA assessment and remove
# some variables as discussed above
# Current dim
dim(res) # 1892 x 30, as above
# Reassess NA
colSums(is.na(res))
# For the following variables, we will drop rows with NA:
# Gender (1)
# BusinessType (18)
# ReceivedIOMBusinessAdvice (11)
# FirstChoice (12)
# Total: 42
# That's because these cannot be meaningfully recoded or solved as we have done
# in the previous step. Let's do it.
res <- res %>% drop_na(Gender, BusinessType, ReceivedIOMBusinessAdvice, FirstChoice)
# New dim
dim(res) # 1,852 x 30, meaning we lost 40 observations (in other words, 2 were missing
# for several variables)
# Let's also discard 2 variables entirely, since they are very low count and cannot
# be recoded. These variables are:
# Disabled, who has only 89
# MicroBusinessLevel (from Mimosa), due to following counts
#MicroBusinessLevel count percent
#Individual          1541   81.4
#NA                   199   10.5
#Collective            71    3.75
#Community             54    2.85
#NULL                  27    1.43
res <- res %>% select(-c(Disabled, MicroBusinessLevel))
# New dim
dim(res) # 1,852 x 28, as expected
# New NA assessment
colSums(is.na(res)) # 0 in all expected (i.e. categorical) variables
# We are finally ready to clean numeric variables. Let's do it.
# Our numeric variables are:
str(res)
# (1) MigrationDuration,      a char to be converted to num,  with  97 NA
# (2) TrainingDuration,       a char to be converted to num,  with 194 NA
# (3) ReturnToReintegration,  already a num,                  with 206 NA
# (4) AssistanceDuration,     already a num,                  with 206 NA
# Also remember what these variables are:
# (1) MigrationDuration     Kobo,   "Durée de l’absence du pays d’origine   Mettre 0 si moins d'un an"
#     --> available as such in raw data
#     --> in years
# (2) TrainingDuration      Mimosa, "Duree formation"
#     --> available as such in raw data
#     --> in days
# (3) ReturnToReintegration Mimosa, "ArrivalDate_Mimosa"                    renamed DateOfReturn
#                       AND Mimosa, "Date de reception de la reintegration" renamed ReintegrationDate
#     --> computed as ReintegrationDate - DateOfReturn
#     --> in days
# (4) AssistanceDuration    Mimosa, "Date de réception de la réintégration" renamed ReintegrationDate
#                       AND Kobo,   "Date de l'enquête"                     renamed InterviewDate
#     --> computed as InterviewDate - ReintegrationDate
#     --> in days
# We'll try to use a similar code as in preparation_rss.R. That's because it is also
# based on a merge (i.e, it has Mimosa data), contrary to preparation.res.R, which only
# has kobo data.
# This table will come handy to be sure we deal with the same variables
# Name in RES ################################## Name in RSS ### Checked it is same variable?
# MigrationDuration-----------------------migration_duration-----YES
# TrainingDuration--------------------------TrainingDuration-----YES, but in RSS, was computed using
# TrainingEndDate & TrainingStartDate
# ReturnToReintegration-------------------No equivalent in RSS---Not applicable
# AssistanceDuration----------------------No equivalent in RSS---But... is similar to
# MBAssistanceDuration, which is
# interview_date [Kobo]
# - MicrobusinessEndDate [Mimosa]
# MigrationDuration
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(res$MigrationDuration)) # 97
# Print levels before
res %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n=49)
# Convert to number
res$MigrationDuration  <- as.numeric(res$MigrationDuration)
# Print levels after
res %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n=49) # all good
# Check NA count after
sum(is.na(res$MigrationDuration)) # still 97, all good
# First, we'll replace these 3 values, which are mistakes and not outliers,
# with NA
res[res$MigrationDuration > 100 & !is.na(res$MigrationDuration), "MigrationDuration"]
res[res$MigrationDuration > 100 & !is.na(res$MigrationDuration), "MigrationDuration"]  <- NA
# New NA count
sum(is.na(res$MigrationDuration)) # 100, as expected
# Summarise
summary(res$MigrationDuration) # median = 2, min 0, max 36, NA 100, all as expected
# Let's store the median
q_median <- median(res$MigrationDuration, na.rm = TRUE)
q_median # 2 years
# Boxplot before
boxplot(res$MigrationDuration,
ylab = "Years",
main = "MigrationDuration"
)
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(res$MigrationDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$MigrationDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$MigrationDuration < lower_bound | res$MigrationDuration > upper_bound)
dim(res[outlier_ind, "MigrationDuration"]) # 16 outliers,
res[outlier_ind, "MigrationDuration"] # with smallest being 16 years
# Replace 16 extreme outliers with median
res[outlier_ind, "MigrationDuration"] <- q_median
# Boxplot after
boxplot(res$MigrationDuration,
ylab = "Years",
main = "MigrationDuration"
)
# Re-summarise
summary(res$MigrationDuration) # median still 2, max 14 years as expected
# We should still have the same number of NA
sum(is.na(res$MigrationDuration)) # 100 --> as expected
# And we will also replace them with the median
res[is.na(res$MigrationDuration), "MigrationDuration"] <- q_median
# Re-summarise
summary(res$MigrationDuration) # median still 2, max still 14
# No NA should remain
sum(is.na(res$MigrationDuration)) # 0, all good
# TrainingDuration
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(res$TrainingDuration)) # 194
# Print levels before
res %>% group_by(TrainingDuration) %>% summarise(count = n()) %>% print(n=49)
# Convert to number
res$TrainingDuration  <- as.numeric(res$TrainingDuration)
# Print levels after
res %>% group_by(TrainingDuration) %>% summarise(count = n()) %>% print(n=49) # all good
# Check NA count after
sum(is.na(res$TrainingDuration)) # still 194, all good
# Summarise
summary(res$TrainingDuration) # median = 0, min 0, max 756, NA 194, all as expected
# Let's store the median
q_median <- median(res$TrainingDuration, na.rm = TRUE)
q_median # 0
# Boxplot before
boxplot(res$TrainingDuration,
ylab = "Days",
main = "TrainingDuration"
)
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(res$TrainingDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$TrainingDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$TrainingDuration < lower_bound | res$TrainingDuration > upper_bound)
dim(res[outlier_ind, "TrainingDuration"]) # 11 outliers,
res[outlier_ind, "TrainingDuration"] # with smallest being 35 days
# Replace 11 extreme outliers with median
res[outlier_ind, "TrainingDuration"] <- q_median
# Boxplot after
boxplot(res$TrainingDuration,
ylab = "Days",
main = "TrainingDuration"
)
# Re-summarise
summary(res$TrainingDuration) # median still 0, max 34 years as expected
# We should still have the same number of NA
sum(is.na(res$TrainingDuration)) # 194 --> as expected
# And we will also replace them with the median
res[is.na(res$TrainingDuration), "TrainingDuration"] <- q_median
# Re-summarise
summary(res$TrainingDuration) # median still 0, max still 34
# No NA should remain
sum(is.na(res$TrainingDuration)) # 0, all good
# ReturnToReintegration
# Print NA
sum(is.na(res$ReturnToReintegration)) # 206
# Summarise
summary(res$ReturnToReintegration) # median = 212, min -132!, max 2025
# We have some negative values, which is weird. Let's take a look
res[res$ReturnToReintegration <= 0 & !is.na(res$ReturnToReintegration), "ReturnToReintegration"] # 7
# We will replace these values with the median. For this, we need to
# compute the median without taking the negative values into consideration:
summary(res[!res$ReturnToReintegration <= 0 & !is.na(res$ReturnToReintegration), "ReturnToReintegration"]) # 1,639, which is 1852 - 7 negative values - 206 NA indeed
# Store median
q_median <- 214
# Replace negative values with the updated median (note, we keep 1 zero value)
res[res$ReturnToReintegration < 0 & !is.na(res$ReturnToReintegration), "ReturnToReintegration"] <- q_median
# Resummarise
summary(res$ReturnToReintegration) # median = now 214, min now 0, max still 2025, all as expected
# Boxplot before
boxplot(res$ReturnToReintegration,
ylab = "Days",
main = "ReturnToReintegration"
)
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(res$ReturnToReintegration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$ReturnToReintegration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$ReturnToReintegration < lower_bound | res$ReturnToReintegration > upper_bound)
dim(res[outlier_ind, "ReturnToReintegration"]) # 32 outliers,
res[outlier_ind, "ReturnToReintegration"] %>% print(n=32) # with smallest being 0 days or 1552 days
# We do not want to replace lower_bound outliers, though, so we take only upper bound
lower_bound <- quantile(res$ReturnToReintegration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$ReturnToReintegration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$ReturnToReintegration > upper_bound) # only upper bound
dim(res[outlier_ind, "ReturnToReintegration"]) # 17 outliers,
res[outlier_ind, "ReturnToReintegration"] %>% print(n=32) # with smallest being 1552 days
# Replace 17 extreme outliers with median
res[outlier_ind, "ReturnToReintegration"] <- q_median
# Boxplot after
boxplot(res$ReturnToReintegration,
ylab = "Days",
main = "ReturnToReintegration"
)
# Re-summarise
summary(res$ReturnToReintegration) # median still 214, max 1543 years as expected
# We should still have the same number of NA
sum(is.na(res$ReturnToReintegration)) # 206 --> as expected
# And we will also replace them with the median
res[is.na(res$ReturnToReintegration), "ReturnToReintegration"] <- q_median
# Re-summarise
summary(res$ReturnToReintegration) # median still 214, max still 1543
# No NA should remain
sum(is.na(res$ReturnToReintegration)) # 0, all good
# AssistanceDuration
# Print NA
sum(is.na(res$AssistanceDuration)) # 206
# Summarise
summary(res$AssistanceDuration) # median = 92, min -574!, max 1468
# We have some negative values, which is weird. Let's take a look
res[res$AssistanceDuration <= 0 & !is.na(res$AssistanceDuration), "AssistanceDuration"] # 237
# We will replace these values with the median. For this, we need to
# compute the median without taking the negative values into consideration:
summary(res[!res$AssistanceDuration <= 0 & !is.na(res$AssistanceDuration), "AssistanceDuration"]) # 1,409, which is 1852 - 237 negative values - 206 NA indeed
# Store median
q_median <- 112
# Replace negative values with the updated median (note, we keep the zero values)
res[res$AssistanceDuration < 0 & !is.na(res$AssistanceDuration), "AssistanceDuration"] <- q_median
# Resummarise
summary(res$AssistanceDuration) # median = now 112, min now 0, max still 1468, all as expected
# Boxplot before
boxplot(res$AssistanceDuration,
ylab = "Days",
main = "AssistanceDuration"
)
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(res$AssistanceDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$AssistanceDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$AssistanceDuration < lower_bound | res$AssistanceDuration > upper_bound)
dim(res[outlier_ind, "AssistanceDuration"]) # 34 outliers,
res[outlier_ind, "AssistanceDuration"] %>% print(n=34) # with smallest being 0 days or 1130 days
# We do not want to replace lower_bound outliers, though, so we take only upper bound
lower_bound <- quantile(res$AssistanceDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(res$AssistanceDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(res$AssistanceDuration > upper_bound) # only upper bound
dim(res[outlier_ind, "AssistanceDuration"]) # 17 outliers,
res[outlier_ind, "AssistanceDuration"] %>% print(n=32) # with smallest being 1130 days
# Replace 17 extreme outliers with median
res[outlier_ind, "AssistanceDuration"] <- q_median
# Boxplot after
boxplot(res$AssistanceDuration,
ylab = "Days",
main = "AssistanceDuration"
)
# Re-summarise
summary(res$AssistanceDuration) # median still 112, max 1122 days as expected
# We should still have the same number of NA
sum(is.na(res$AssistanceDuration)) # 206 --> as expected
# And we will also replace them with the median
res[is.na(res$AssistanceDuration), "AssistanceDuration"] <- q_median
# Re-summarise
summary(res$AssistanceDuration) # median still 112, max still 1122
# No NA should remain
sum(is.na(res$AssistanceDuration)) # 0, all good
# Export slim version
# Final dim
dim(res)
# Export
write_excel_csv(res, 'data_clean/res_training_slim.csv')
# RDS version
saveRDS(res, file = 'data_clean/res_training_slim.rds')
getwd()
library(readxl)
library(tidyverse)
# Load res object as df, and convert strings to factors
df <- readRDS('data_clean/rss_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(df) # 2,026 x 33
dim(df) # 1,385 x 34
# Subset to RSS vars
df <- df %>% select(
EconomicScore, SocialScore, PsychoSocialScore, CompositeScore
)
df
cor(df)
library(GGally)
library("GGally")
library(ggplot2)
library(ggplot2)
library(GGally)
ggpairs(df)
library(GGally)
install.packages("GGally")
library(GGally)
ggpairs(df)
cor(df)
ggcorr(df)
ggpairs(df)
theme_set('minimal')
ggpairs(df)
theme_set(theme_minimal())
ggpairs(df)
theme_set(theme_bw())
ggpairs(df)
theme_set(theme_classic())
ggpairs(df)
theme_set(theme_light())
ggpairs(df)
getwd()
library(tidyverse)
library(ggplot2)
library(GGally)
# Load res object as df, and convert strings to factors
df <- readRDS('data_clean/rss_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(df) # 1,385 x 34
# Subset to RSS vars
df <- df %>% select(
EconomicScore, SocialScore, PsychoSocialScore, CompositeScore
)
cor(df)
ggpairs(df)
