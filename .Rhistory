} # for end
} # func end
# Test on mini df
#make_plots_by_BusinessSuccess(mini)
# Implement on full data
make_plots_by_BusinessSuccess(df)
# Counter
counter <- 0
# Function
make_plots_by_BusinessSuccess <- function(df){ # fun start
# FOR-LOOP
for (col in colnames(df)){ # for start
# (1) Some variables we'll need:
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Count of missing observations; needed for plot title
Missing <- sum(is.na(df[col]))
# Number of levels for each factor; needed for saving plots in correct aspect
# ratio
n_levels <- dim(unique(df[col]))[1]
# Number of grouping levels; needed for saving plot
n_grouping <- dim(unique(df['BusinessSuccess']))[1]
# Update counter; needed for plot numbering
counter <- counter + 1
# Skip items with 0 observations
# This is crucial to avoid error when wrapping long level names (these cannot
# be wrapped in there are none)
if (N == 0) next
# (2) FACTOR VARIABLES (i.e., factors that are not ordered)
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if start
p <- ggplot(data = df %>% filter(!is.na(df[col])),
aes(x = fct_rev(fct_infreq(!!sym(col))), fill =
fct_rev(BusinessSuccess))) # BusinessSuccess needs to be reversed
# just so that guide_legend can then be reversed
# NEW (replace the above):
#p <- ggplot(data = df %>% filter(!is.na(df[col])),
#            aes(fill = fct_rev(fct_infreq(!!sym(col))), x =
#                  fct_rev(BusinessSuccess))) # BusinessSuccess needs to be reversed
# just so that guide_legend can then be reversed
# NEW, Below, replaced all ..fill.. by ..x..
p <- p + geom_bar(aes(y=..count../tapply(..count.., ..x.. ,sum)[..x..]),
position='stack', width = 0.75, size = 3) # width initially 0.5, position='dodge' 0.75
p <- p + geom_text(aes(y=..count../tapply(..count.., ..x.. ,sum)[..x..],
label=scales::percent(..count../tapply(..count.., ..x.., sum)
[..x..], accuracy = 0.1L)),
stat="count", position = position_stack(vjust = 0.5)) # previously: position=position_dodge(0.7), hjust=-0.05
# NEW (no longer needed)
#p <- p + scale_fill_manual(values = c('#49C16DFF', '#FBA238FF', '#38598CFF'))
# Important to use fill here, not color!
p <- p + guides(fill = guide_legend(reverse = TRUE))
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessSuccess'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ','),
', interpret with caution!' ))
} else {
p <- p + labs(title = paste('Business Success | by', col), # paste(col, '| by BusinessSuccess')
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Wrap long level names
p <- p + scale_x_discrete(labels = function(x) str_wrap(x, width = 30))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
p <- p + coord_flip(clip = 'off')
print(p)
# Export
if (n_levels<15) {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessSuccess',
width = 16.5,
height = n_levels * 1.8 + 1, units = 'cm')
# If factor has more than 13 levels, it is better to use this proportion, though
} else {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessSuccess',
width = 16.5,
height = n_levels * 1.3, units = 'cm')
}
# (3) ORDERED VARIABLES (i.e., factors that are ordered)
} else if (is.factor(df[[col]]) & is.ordered(df[[col]])){
p <- ggplot(data = df %>% filter(!is.na(df[col])),
aes(x = !!sym(col), fill = # No longer needs to be reversed
fct_rev(BusinessSuccess))) # BusinessSuccess needs to be reversed
# just so that guide_legend can then be reversed
p <- p + geom_bar(aes(y=..count../tapply(..count.., ..fill.. ,sum)[..fill..]),
position='dodge', width = 0.75, size = 3) # width initially 0.5
p <- p + geom_text(aes(y=..count../tapply(..count.., ..fill.. ,sum)[..fill..],
label=scales::percent(..count../tapply(..count.., ..fill.., sum)
[..fill..], accuracy = 0.1L)),
stat="count", position=position_dodge(0.7), hjust=-0.05)#,
# = 'A')  # dodge init 0.5
p <- p + scale_fill_manual(values = c('#49C16DFF', '#FBA238FF', '#38598CFF'))
# Important to use fill here, not color!
p <- p + guides(fill = guide_legend(reverse = TRUE))
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessSuccess'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
, ', interpret with caution!' ))
} else {
p <- p + labs(title = paste(col, '| by BusinessSuccess'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Wrap long level names
p <- p + scale_x_discrete(labels = function(x) str_wrap(x, width = 30))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
p <- p + coord_flip(clip = 'off')
print(p)
# Export
if (n_levels<15) {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessSuccess',
width = 16.5,
height = n_levels * 1.8 + 1, units = 'cm')
# If factor has more than 13 levels, it is better to use this proportion, though
} else {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessSuccess',
width = 16.5,
height = n_levels * 1.3, units = 'cm')
}
# (3) NUMERIC VARIABLES
}  else if (is.numeric(df[[col]])) {  # if end; else if start
p <- ggplot(data = df, aes(y = !!sym(col), x = fct_rev(BusinessSuccess),
fill = fct_rev(BusinessSuccess)))
p <- p + geom_jitter(aes(color=fct_rev(BusinessSuccess)), width = 0.2, alpha=1, size=0.6)
p <- p +  geom_boxplot(alpha=0.9)
#p <- p + scale_fill_manual(values = c('#38598CFF', '#FBA238FF', '#49C16DFF')) # note
# colors are reversed!
#p <- p + scale_color_manual(values = c('#38598CFF', '#FBA238FF', '#49C16DFF'))
#p <- p + guides(fill = guide_legend(reverse = TRUE))
p <- p + coord_flip()
#p <- p + scale_y_continuous(breaks = round(seq(min(df[[col]]), max(df[[col]]), by = 10),1))
# PUT above line once data are clean! Currently AmountSpent is infinite
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessSuccess'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
, ', interpret with caution!' ))
} else {
p <- p + labs(title = paste('Business Success | by', col),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Aesthetics
p <- p + theme_minimal()  # base_ = 'A'
p <- p + theme(axis.title.y = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
axis.text.x = element_text(colour='black', size = 12),
axis.title.x = element_text(colour='black', size = 12),
legend.position = 'none',
#plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessSuccess',
width = 16.5,
height = n_grouping * 3 + 1, units = 'cm') # initially *1.3
# OTHER VARIABLES
} else { # else if end; else start
print(paste('Column', col, 'is a character; not plotted'))
} # else end
} # for end
} # func end
# Test on mini df
#make_plots_by_BusinessSuccess(mini)
# Implement on full data
make_plots_by_BusinessSuccess(df)
# Counter
counter <- 0
# Function
make_plots_by_BusinessSuccess <- function(df){ # fun start
# FOR-LOOP
for (col in colnames(df)){ # for start
# (1) Some variables we'll need:
# Count of non-na rows; needed for plot title
N <- sum(!is.na(df[col]))
# Count of missing observations; needed for plot title
Missing <- sum(is.na(df[col]))
# Number of levels for each factor; needed for saving plots in correct aspect
# ratio
n_levels <- dim(unique(df[col]))[1]
# Number of grouping levels; needed for saving plot
n_grouping <- dim(unique(df['BusinessProfitability']))[1]
# Update counter; needed for plot numbering
counter <- counter + 1
# Skip items with 0 observations
# This is crucial to avoid error when wrapping long level names (these cannot
# be wrapped in there are none)
if (N == 0) next
# (2) FACTOR VARIABLES (i.e., factors that are not ordered)
if (is.factor(df[[col]]) & !is.ordered(df[[col]])) { # if start
p <- ggplot(data = df %>% filter(!is.na(df[col])),
aes(x = fct_rev(fct_infreq(!!sym(col))), fill =
fct_rev(BusinessProfitability))) # BusinessProfitability needs to be reversed
# just so that guide_legend can then be reversed
# NEW (replace the above):
#p <- ggplot(data = df %>% filter(!is.na(df[col])),
#            aes(fill = fct_rev(fct_infreq(!!sym(col))), x =
#                  fct_rev(BusinessProfitability))) # BusinessProfitability needs to be reversed
# just so that guide_legend can then be reversed
# NEW, Below, replaced all ..fill.. by ..x..
p <- p + geom_bar(aes(y=..count../tapply(..count.., ..x.. ,sum)[..x..]),
position='stack', width = 0.75, size = 3) # width initially 0.5, position='dodge' 0.75
p <- p + geom_text(aes(y=..count../tapply(..count.., ..x.. ,sum)[..x..],
label=scales::percent(..count../tapply(..count.., ..x.., sum)
[..x..], accuracy = 0.1L)),
stat="count", position = position_stack(vjust = 0.5)) # previously: position=position_dodge(0.7), hjust=-0.05
# NEW (no longer needed)
#p <- p + scale_fill_manual(values = c('#49C16DFF', '#FBA238FF', '#38598CFF'))
# Important to use fill here, not color!
p <- p + guides(fill = guide_legend(reverse = TRUE))
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessProfitability'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ','),
', interpret with caution!' ))
} else {
p <- p + labs(title = paste('Business Profitability | by', col), # paste(col, '| by BusinessProfitability')
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Wrap long level names
p <- p + scale_x_discrete(labels = function(x) str_wrap(x, width = 30))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
p <- p + coord_flip(clip = 'off')
print(p)
# Export
if (n_levels<15) {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessProfitability',
width = 16.5,
height = n_levels * 1.8 + 1, units = 'cm')
# If factor has more than 13 levels, it is better to use this proportion, though
} else {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessProfitability',
width = 16.5,
height = n_levels * 1.3, units = 'cm')
}
# (3) ORDERED VARIABLES (i.e., factors that are ordered)
} else if (is.factor(df[[col]]) & is.ordered(df[[col]])){
p <- ggplot(data = df %>% filter(!is.na(df[col])),
aes(x = !!sym(col), fill = # No longer needs to be reversed
fct_rev(BusinessProfitability))) # BusinessProfitability needs to be reversed
# just so that guide_legend can then be reversed
p <- p + geom_bar(aes(y=..count../tapply(..count.., ..fill.. ,sum)[..fill..]),
position='dodge', width = 0.75, size = 3) # width initially 0.5
p <- p + geom_text(aes(y=..count../tapply(..count.., ..fill.. ,sum)[..fill..],
label=scales::percent(..count../tapply(..count.., ..fill.., sum)
[..fill..], accuracy = 0.1L)),
stat="count", position=position_dodge(0.7), hjust=-0.05)#,
# = 'A')  # dodge init 0.5
p <- p + scale_fill_manual(values = c('#49C16DFF', '#FBA238FF', '#38598CFF'))
# Important to use fill here, not color!
p <- p + guides(fill = guide_legend(reverse = TRUE))
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessProfitability'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
, ', interpret with caution!' ))
} else {
p <- p + labs(title = paste(col, '| by BusinessProfitability'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Wrap long level names
p <- p + scale_x_discrete(labels = function(x) str_wrap(x, width = 30))
# Aesthetics
p <- p + theme_minimal()
p <- p + theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 12),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
p <- p + coord_flip(clip = 'off')
print(p)
# Export
if (n_levels<15) {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessProfitability',
width = 16.5,
height = n_levels * 1.8 + 1, units = 'cm')
# If factor has more than 13 levels, it is better to use this proportion, though
} else {
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessProfitability',
width = 16.5,
height = n_levels * 1.3, units = 'cm')
}
# (3) NUMERIC VARIABLES
}  else if (is.numeric(df[[col]])) {  # if end; else if start
p <- ggplot(data = df, aes(y = !!sym(col), x = fct_rev(BusinessProfitability),
fill = fct_rev(BusinessProfitability)))
p <- p + geom_jitter(aes(color=fct_rev(BusinessProfitability)), width = 0.2, alpha=1, size=0.6)
p <- p +  geom_boxplot(alpha=0.9)
#p <- p + scale_fill_manual(values = c('#38598CFF', '#FBA238FF', '#49C16DFF')) # note
# colors are reversed!
#p <- p + scale_color_manual(values = c('#38598CFF', '#FBA238FF', '#49C16DFF'))
#p <- p + guides(fill = guide_legend(reverse = TRUE))
p <- p + coord_flip()
#p <- p + scale_y_continuous(breaks = round(seq(min(df[[col]]), max(df[[col]]), by = 10),1))
# PUT above line once data are clean! Currently AmountSpent is infinite
# Generate title and subtitle using string literals
if (N < 100) {
p <- p + labs(title = paste(col, '| by BusinessProfitability'),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
, ', interpret with caution!' ))
} else {
p <- p + labs(title = paste('Business Profitability | by', col),
subtitle = paste0('Single-select | ', 'N = ', format(N, big.mark = ',')
))
}
# Aesthetics
p <- p + theme_minimal()  # base_ = 'A'
p <- p + theme(axis.title.y = element_blank(),
axis.text.y = element_text(colour='black', size = 12),
axis.text.x = element_text(colour='black', size = 12),
axis.title.x = element_text(colour='black', size = 12),
legend.position = 'none',
#plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 16),
plot.subtitle = element_text(size = 12),
panel.grid = element_blank())
print(p)
# Export
ggsave(paste(counter, '_', col, '.png'), path = 'plots/single_select/by_BusinessProfitability',
width = 16.5,
height = n_grouping * 3 + 1, units = 'cm') # initially *1.3
# OTHER VARIABLES
} else { # else if end; else start
print(paste('Column', col, 'is a character; not plotted'))
} # else end
} # for end
} # func end
# Test on mini df
#make_plots_by_BusinessSuccess(mini)
# Implement on full data
make_plots_by_BusinessSuccess(df)
getwd()
library(readxl)
library(tidyverse)
# RES
res <- readRDS('data_clean/res_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(res) # 2,026 x 23
# RSS
rss  <- readRDS('data_clean/rss_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(rss) # 1,385 x 21
# RSS
rss  <- readRDS('data_clean/rss_slim_recoded.rds')%>%
mutate(across(where(is.character), as.factor))
dim(rss) # 1,385 x 34
# Training
training <- readRDS('data_clean/res_training_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(training) #
# IDs
res$MimosaID
rss$ID
training$ID_1
# Intersect
intersect(res$MimosaID, training$ID_1)
# Intersect
length(intersect(res$MimosaID, training$ID_1))
# Intersect RES-RSS
length(intersect(res$MimosaID, rss$ID)) #
# Intersect RES-Training
length(intersect(rss$ID, training$ID_1)) #
intersect(res$MimosaID, rss$ID, training$ID_1)
intersect(c(res$MimosaID, rss$ID, training$ID_1))
intersect(c(res$MimosaID, training$ID_1))
intersect(c(res$MimosaID, training$ID_1), rss$ID)
length(intersect(c(res$MimosaID, training$ID_1), rss$ID))
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID))
# NA
sum(is.na(res$MimosaID))
sum(is.na(rss$ID)) #
sum(is.na(training$ID_1)) #
# Drop NA
res %>% drop_na(MimosaID)
# Drop NA
res <- res %>% drop_na(MimosaID) # 1,789 remaining
rss %>% drop_na(ID)
rss <- rss %>% drop_na(ID)
dim(rss)
training %>% drop_na(ID_1)
training <- training %>% drop_na(ID_1) # 1,720 remaining
# Intersect RES-Training
length(intersect(res$MimosaID, training$ID_1)) # 1,688
# Intersect RES-RSS
length(intersect(res$MimosaID, rss$ID)) # 78
# Intersect RSS-Training
length(intersect(rss$ID, training$ID_1)) # 75
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID)) # 78
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID)) # 77
getwd()
library(readxl)
library(tidyverse)
# RES
res <- readRDS('data_clean/res_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(res) # 1,917 x 23
# RSS (+ Mimosa)
rss  <- readRDS('data_clean/rss_slim_recoded.rds')%>%
mutate(across(where(is.character), as.factor))
dim(rss) # 1,385 x 21
# Training (RES + Mimosa)
training <- readRDS('data_clean/res_training_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(training) # 1,852 x 28
# IDs
res$MimosaID
rss$ID
training$ID_1
# Intersect RES-Training
length(intersect(res$MimosaID, training$ID_1)) # 1,688
# Intersect RES-RSS
length(intersect(res$MimosaID, rss$ID)) # 78
# Intersect RSS-Training
length(intersect(rss$ID, training$ID_1)) # 75
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID)) # 78
# NA
sum(is.na(res$MimosaID)) # 128
sum(is.na(rss$ID)) # 129
sum(is.na(training$ID_1)) # 132
# Drop NA
res <- res %>% drop_na(MimosaID) # 1,789 remaining
rss <- rss %>% drop_na(ID) # 1,256 remaining
training <- training %>% drop_na(ID_1) # 1,720 remaining
# Reassess after dropping NA
# Intersect RES-Training
length(intersect(res$MimosaID, training$ID_1)) # 1,687
# Intersect RES-RSS
length(intersect(res$MimosaID, rss$ID)) # 77
# Intersect RSS-Training
length(intersect(rss$ID, training$ID_1)) # 74
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID)) # 77
getwd()
library(readxl)
library(tidyverse)
# RES
res <- readRDS('data_clean/res_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(res) # 1,917 x 23
# RSS (+ Mimosa)
rss  <- readRDS('data_clean/rss_slim_recoded.rds')%>%
mutate(across(where(is.character), as.factor))
dim(rss) # 1,385 x 21
# Training (RES + Mimosa)
training <- readRDS('data_clean/res_training_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(training) # 1,852 x 28
# IDs
res$MimosaID
rss$ID
training$ID_1
# Intersect RES-Training
length(intersect(res$MimosaID, training$ID_1)) # 1,688
# Intersect RES-RSS
length(intersect(res$MimosaID, rss$ID)) # 78
# Intersect RSS-Training
length(intersect(rss$ID, training$ID_1)) # 75
# Common to all
length(intersect(c(res$MimosaID, training$ID_1), rss$ID)) # 78
