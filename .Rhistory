"Très souvent ( plusieurs fois dans la semaine/chaque jours)" = 0,
"Je souhaite ne pas répondre" = 0.5
),
`28_psy_support_n` =
recode(`28_psy_support`,
"Non" = 1,
"Oui" = 0,
"Je ne sait pas" = 0.5
),
`29_able_to_stay_n` =
recode(`29_able_to_stay`,
"Oui" = 1, # Read Note 9!
"Non" = 0,
"Je ne sait pas" = 0, # Read Note 9!
"Je souhaite ne pas répondre" = 0.5,
),
`30_wish_vs_need_leave_n` =
recode(`30_wish_vs_need_leave`,
"SOUHAITAIS PARTIR - Par exemple, mes amis / membres de ma famille me manquent ailleurs; les facteurs culturels; souhaite poursuivre des études à l’étranger; etc." = 1,
"BESOIN DE PARTIR - Par exemple, le manque d’emplois; le manque de sécurité; faibles revenus; le manque de services essentiels; la pression familiale; etc." = 0,
)
) %>%
# REPLACE NA  ###############################################################
# According to documentation, all NAs should be coded 0.5
# Also note, these are either pre-existing NAs, or NAs produce by recode()*
# Economic
mutate(`5_debt_ratio_n` = replace_na(`5_debt_ratio_n`, 0.5), # Read Note 2!
`8_assets_n` = replace_na(`8_assets_n`, 1), # Read Note 3!
# Social
`13_school_n` = replace_na(`13_school_n`, 0.5), # Read Note 10!
# Psycho social
`30_wish_vs_need_leave_n` = replace_na(`30_wish_vs_need_leave_n`, 0) # Read Note 9!
) %>%
# ADD 29+30 VARIABLE  #######################################################
# Crucially, this needs to be done AFTER replacing the NA
mutate(# Construct of the above 2 measures
`29_30_remigration_construct` = `29_able_to_stay_n` + `30_wish_vs_need_leave_n` # also
# some NA, see above
) %>%
# ADD WEIGHT ################################################################
# Economic
mutate(`1_economic_dim_weight` = 0.15,
`1_economic_comp_weight` = 0.05,
`2_food_dim_weight` = 0.12,
`2_food_comp_weight` = 0.08,
`3_borrow_dim_weight` = 0.08,
`3_borrow_comp_weight` = 0.02,
`4_borrow_freq_dim_weight` = 0.1,
`4_borrow_freq_comp_weight` = 0.02,
`5_debt_ratio_dim_weight` = 0.08,
`5_debt_ratio_comp_weight` = 0.04,
`6_employment_dim_weight` = 0.13,
`6_employment_comp_weight` = 0.03,
`7_working_dim_weight` = 0.1,
`7_working_comp_weight` = 0.03,
`8_assets_dim_weight` = 0.11,
`8_assets_comp_weight` = 0.03,
`9_searching_job_dim_weight` = 0.13,
`9_searching_job_comp_weight` = 0.03,
# Social
`10_housing_dim_weight` = 0.1,
`10_housing_comp_weight` = 0.03,
`11_housing_qual_dim_weight` = 0.12,
`11_housing_qual_comp_weight` = 0.03,
`12_education_dim_weight` = 0.11,
`12_education_comp_weight` = 0.03,
`13_school_dim_weight` = 0.07,
`13_school_comp_weight` = 0.02,
`14_justice_dim_weight` = 0.12,
`14_justice_comp_weight` = 0.04,
`15_id_dim_weight` = 0.05,
`15_id_comp_weight` = 0.05,
`16_documentation_dim_weight` = 0, # weight = 0!
`16_documentation_comp_weight` = 0, # weight = 0!
`17_water_dim_weight` = 0, # weight = 0!
`17_water_comp_weight` = 0, # weight = 0!
`18_health_dim_weight` = 0.2,
`18_health_comp_weight` = 0.06,
`19_health_qual_dim_weight` = 0.15,
`19_health_qual_comp_weight` = 0.03,
`20_services_construct_dim_weight` = 0.08, # construct!
`20_services_construct_comp_weight` = 0.04, # construct!
# Psycho social
`21_socialize_dim_weight` = 0.12,
`21_socialize_comp_weight` = 0.04,
`22_network_dim_weight` = 0.05,
`22_network_comp_weight` = 0.03,
`23_community_dim_weight` = 0.15,
`23_community_comp_weight` = 0.04,
`24_safety_dim_weight` = 0.1,
`24_safety_comp_weight` = 0.05,
`25_family_conflict_dim_weight` = 0.12,
`25_family_conflict_comp_weight` = 0.01,
`26_discrimination_dim_weight` = 0.11,
`26_discrimination_comp_weight` = 0,
`27_distress_dim_weight` = 0.1,
`27_distress_comp_weight` = 0.04,
`28_psy_support_dim_weight` = 0.1,
`28_psy_support_comp_weight` = 0.03,
`29_30_remigration_construct_dim_weight` = 0.15, # construct!
`29_30_remigration_construct_comp_weight` = 0.1, # construct!
) %>%
# COMPUTE SCORES #############################################################
# Economic (9 indicators)
mutate(`1_economic_dim_score` = `1_economic_n` * `1_economic_dim_weight`,
`1_economic_comp_score` = `1_economic_n` * `1_economic_comp_weight`,
`2_food_dim_score` = `2_food_n` * `2_food_dim_weight`,
`2_food_comp_score` = `2_food_n` * `2_food_comp_weight`,
`3_borrow_dim_score` = `3_borrow_n` * `3_borrow_dim_weight`,
`3_borrow_comp_score` = `3_borrow_n` * `3_borrow_comp_weight`,
`4_borrow_freq_dim_score` = `4_borrow_freq_n` * `4_borrow_freq_dim_weight`,
`4_borrow_freq_comp_score` = `4_borrow_freq_n` * `4_borrow_freq_comp_weight`,
`5_debt_ratio_dim_score` = `5_debt_ratio_n` * `5_debt_ratio_dim_weight`,
`5_debt_ratio_comp_score` = `5_debt_ratio_n` * `5_debt_ratio_comp_weight`,
`6_employment_dim_score` = `6_employment_n` * `6_employment_dim_weight`,
`6_employment_comp_score` = `6_employment_n` * `6_employment_comp_weight`,
`7_working_dim_score` = `7_working_n` * `7_working_dim_weight`,
`7_working_comp_score` = `7_working_n` * `7_working_comp_weight`,
`8_assets_dim_score` = `8_assets_n` * `8_assets_dim_weight`,
`8_assets_comp_score` = `8_assets_n` * `8_assets_comp_weight`,
`9_searching_job_dim_score` = `9_searching_job_n` * `9_searching_job_dim_weight`,
`9_searching_job_comp_score` = `9_searching_job_n` * `9_searching_job_comp_weight`,
# Social (11 indicators)
`10_housing_dim_score` = `10_housing_n` * `10_housing_dim_weight`,
`10_housing_comp_score` = `10_housing_n` * `10_housing_comp_weight`,
`11_housing_qual_dim_score` = `11_housing_qual_n` * `11_housing_qual_dim_weight`,
`11_housing_qual_comp_score` = `11_housing_qual_n` * `11_housing_qual_comp_weight`,
`12_education_dim_score` = `12_education_n` * `12_education_dim_weight`,
`12_education_comp_score` = `12_education_n` * `12_education_comp_weight`,
`13_school_dim_score` = `13_school_n` * `13_school_dim_weight`,
`13_school_comp_score` = `13_school_n` * `13_school_comp_weight`,
`14_justice_dim_score` = `14_justice_n` * `14_justice_dim_weight`,
`14_justice_comp_score` = `14_justice_n` * `14_justice_comp_weight`,
`15_id_dim_score` = `15_id_n` * `15_id_dim_weight`,
`15_id_comp_score` = `15_id_n` * `15_id_comp_weight`,
`16_documentation_dim_score` = `16_documentation_n` * `16_documentation_dim_weight`, # weight=0!
`16_documentation_comp_score` = `16_documentation_n` * `16_documentation_comp_weight`, # weight=0!
`17_water_dim_score` = `17_water_n` * `17_water_dim_weight`, # weight = 0!
`17_water_comp_score` = `17_water_n` * `17_water_comp_weight`, # weight = 0!
`18_health_dim_score` = `18_health_n` * `18_health_dim_weight`,
`18_health_comp_score` = `18_health_n` * `18_health_comp_weight`,
`19_health_qual_dim_score` = `19_health_qual_n` * `19_health_qual_dim_weight`,
`19_health_qual_comp_score` = `19_health_qual_n` * `19_health_qual_comp_weight`,
`20_services_construct_dim_score` = `20_services_construct_n` * `20_services_construct_dim_weight`, # construct!
`20_services_construct_comp_score` = `20_services_construct_n` * `20_services_construct_comp_weight`, # construct!
# Psycho social (9 indicators)
`21_socialize_dim_score` = `21_socialize_n` * `21_socialize_dim_weight`,
`21_socialize_comp_score` = `21_socialize_n` * `21_socialize_comp_weight`,
`22_network_dim_score` = `22_network_n` * `22_network_dim_weight`,
`22_network_comp_score` = `22_network_n` * `22_network_comp_weight`,
`23_community_dim_score` = `23_community_n` * `23_community_dim_weight`,
`23_community_comp_score` = `23_community_n` * `23_community_comp_weight`,
`24_safety_dim_score` = `24_safety_n` * `24_safety_dim_weight`,
`24_safety_comp_score` = `24_safety_n` * `24_safety_comp_weight`,
`25_family_conflict_dim_score` = `25_family_conflict_n` * `25_family_conflict_dim_weight`,
`25_family_conflict_comp_score` = `25_family_conflict_n` * `25_family_conflict_comp_weight`,
`26_discrimination_dim_score` = `26_discrimination_n` * `26_discrimination_dim_weight`,
`26_discrimination_comp_score` = `26_discrimination_n` * `26_discrimination_comp_weight`,
`27_distress_dim_score` = `27_distress_n` * `27_distress_dim_weight`,
`27_distress_comp_score` = `27_distress_n` * `27_distress_comp_weight`,
`28_psy_support_dim_score` = `28_psy_support_n` * `28_psy_support_dim_weight`,
`28_psy_support_comp_score` = `28_psy_support_n` * `28_psy_support_comp_weight`,
`29_30_remigration_construct_dim_score` = `29_30_remigration_construct` * `29_30_remigration_construct_dim_weight`, # construct!
`29_30_remigration_construct_comp_score` = `29_30_remigration_construct` * `29_30_remigration_construct_comp_weight`, # construct!
) %>%
# COMPUTE DIMENSIONAL SCORES ################################################
# Economic (9 indicators)
mutate(EconomicScore =
`1_economic_dim_score` + `2_food_dim_score` + `3_borrow_dim_score` + `4_borrow_freq_dim_score` + `5_debt_ratio_dim_score` + `6_employment_dim_score` + `7_working_dim_score` + `8_assets_dim_score` + `9_searching_job_dim_score`,
# Social (11 indicators)
SocialScore = `10_housing_dim_score` + `11_housing_qual_dim_score` + `12_education_dim_score` + `13_school_dim_score` + `14_justice_dim_score` + `15_id_dim_score` + `16_documentation_dim_score` + `17_water_dim_score` + `18_health_dim_score` + `19_health_qual_dim_score` + `20_services_construct_dim_score`,
# Psycho social (9 indicators)
PsychoSocialScore = `21_socialize_dim_score` + `22_network_dim_score` + `23_community_dim_score` + `24_safety_dim_score` + `25_family_conflict_dim_score` + `26_discrimination_dim_score` + `27_distress_dim_score` + `28_psy_support_dim_score` + `29_30_remigration_construct_dim_score`
) %>%
# COMPUTE COMPOSITE SCORE ################################################
# 29 indicators
mutate(CompositeScore = `1_economic_comp_score` + `2_food_comp_score` + `3_borrow_comp_score` + `4_borrow_freq_comp_score` + `5_debt_ratio_comp_score` + `6_employment_comp_score` + `7_working_comp_score` + `8_assets_comp_score` + `9_searching_job_comp_score` + `10_housing_comp_score` + `11_housing_qual_comp_score` + `12_education_comp_score` + `13_school_comp_score` + `14_justice_comp_score` + `15_id_comp_score` + `16_documentation_comp_score` + `17_water_comp_score` + `18_health_comp_score` + `19_health_qual_comp_score` + `20_services_construct_comp_score` + `21_socialize_comp_score` + `22_network_comp_score` + `23_community_comp_score` + `24_safety_comp_score` + `25_family_conflict_comp_score` + `26_discrimination_comp_score` + `27_distress_comp_score` + `28_psy_support_comp_score` + `29_30_remigration_construct_comp_score`
)
# Warnings
# (1) Problem while computing `8_assets_n = recode(...)`. Can be safely ignored,
# since NA are replaced following it, on purpose.
# 3. MERGE ####
# Objects dimensions
dim(mimosa_slim) # 2,580 x  28
dim(kobo_slim)   # 1,385 x 187
# Target dimension
# 1,385 x 214
# Check duplicates in Mimosa (not an issue, just for the record)
sum(duplicated(mimosa$`CaseNo/IndividualNo`)) # 13
sum(duplicated(mimosa_slim$ID))  # 13
mimosa_slim[duplicated(mimosa_slim$ID), 'ID']
# We'll do a right join, keeping all rows from kobo_slim
rss <- merge(mimosa_slim, kobo_slim, by='ID', all.y = TRUE)
# Dimensions
dim(rss) # 1,385 x 214 --> as expected
# Check perfect duplicates
sum(duplicated(rss)) # 0
# Check pseudo-duplicates
sum(duplicated(rss$ID)) # 128
# Note all these duplicates are NA, as expected
rss[duplicated(rss$ID), "ID"]
# Compute last needed variable
rss  <- rss %>% mutate(MBAssistanceDuration =
as.numeric(difftime(interview_date, MicrobusinessEndDate, units = "days")))
# Final dimensions
dim(rss) # 1,385 x 215 --> as expected
# NA
colSums(is.na(rss))
# Data types
str(rss)
# Character to Numeric
# If needed, outstanding
# EXPORT FULL DATA ####
#write_excel_csv(rss, 'data_clean/rss.csv')
# RDS version
#saveRDS(rss, file = 'data_clean/rss.rds')
###############################################################################
# SUBSET A SLIM VERSION ####
rss_slim <- rss %>%
# SELECT
select(ID,
# Dependent variables
EconomicScore,
SocialScore,
PsychoSocialScore,
CompositeScore,
# Independent variables
# (a) Numeric
migration_duration,
TrainingDuration,
MBSupportDuration,
MBAssistanceDuration,
# (b) Categorical
sex,
age, # --> to convert to num in due time
return_country,
origin_country,
VOTs,
UMINOR,
HealthCondition,
# (c) Assistance
CounsellingStatus,
EconomicSupport,
FinancialServices,
JobPlacement,
Microbusiness,
Training,
SocialSupport,
ChildCare,
Education,
Housing,
LegalServices,
MaterialAssistance,
MedicalSupport,
SocialProtectionSchemes,
PsychosocialSupport,
# (d) Other
Microbusinesslevel,
MicrobusinessDeliveredBy,
MicrobusinessFormOfAssistance
)
# WE ARE HERE
# NA
#colSums(is.na(rss_slim))
# Recode Independent variables
# Principles:
# Answers who represent less than 15% of all answers are grouped together
# Exceptions:
# sex (female=14%), since this is a crucial variable
# origin_country, kept all above 10%
colSums(is.na(rss_slim))
# Before
rss_slim %>% group_by(FinancialServices) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent) %>% print(n=21)
# Variable-------------------------Levels ---Smallest -----NA -----Decision
# sex: -------------------------------- 2 ------  195 ----- 0 ---> keep as is
# return_country: -------------------- 20 --------- 1 ----- 0 ---> recode
# origin_country: -------------------- 12 -------- 43 ----- 0 ---> recode
# VOTs: ------------------------------- 2 -------- 27 --- 189 ---> drop variable
# UMINOR: ----------------------------- 2 --------- 6 --- 189 ---> drop variable
# HealthCondition:--------------------- 2 -------- 59 --- 189 ---> drop variable
# CounsellingStatus:------------------- 5 ------- *70 --- 325 ---> drop variable
# EconomicSupport:--------------------- 2 --------- 4 --- 189 ---> drop variable
# FinancialServices:------------------- 2 ------- 345 --- 189 ---> keep variable, fill NA (189)
# JobPlacement:------------------------ 2 --------- 2 --- 189 ---> drop variable
# Microbusiness:----------------------- 2 -------- 12 --- 189 ---> drop variable
# Training:---------------------------- 2 ------- 581 --- 189 ---> keep variable, fill NA (189)
# SocialSupport:----------------------- 2 ------- 198 --- 189 ---> keep variable, fill NA (189)
# ChildCare:--------------------------- 2 --------- 2 --- 189 ---> drop variable
# Education:--------------------------- 2 --------- 4 --- 189 ---> drop variable
# Housing:----------------------------- 2 -------- 19 --- 189 ---> drop variable
# LegalServices:----------------------- 2 -------- 39 --- 189 ---> drop variable
# MaterialAssistance :----------------- 2 ------- 154 --- 189 ---> keep variable, fill NA (189)
# MedicalSupport:---------------------- 2 ------- 193 --- 189 ---> keep variable, fill NA (189)
# SocialProtectionSchemes:------------- 2 --------- 1 --- 189 ---> drop variable
# PsychosocialSupport:----------------- 2 ------- 434 --- 189 ---> keep variable, fill NA (189)
# Microbusinesslevel:------------------ 3 ------- *33 --- 201 ---> drop variable
# MicrobusinessDeliveredBy:------------ 2 -------- 23 --- 201 ---> drop variable
# MicrobusinessFormOfAssistance:------- 3 ------- 186 --- 262 ---> keep variable, fill NA (262)
# Note, levels do NOT include NA level
# *several categories, but cannot be combined
dim(rss_slim) # 1385 x 34
# If NA are dropped, 1385 - 189 = 1196
rss_slim <- rss_slim %>% mutate(
# RECODE
return_country =
case_when(
return_country != "Libye" & return_country != "Niger" & return_country != "Algérie"  ~ 'Autre',
TRUE ~ as.character(return_country)
),
origin_country =
case_when(
origin_country != "Niger" & origin_country != "Guinee Conakry" & origin_country != "Mali" & origin_country != "Tchad"  ~ 'Autre',
TRUE ~ as.character(origin_country)
)
) %>%
# FILL NA
mutate(MicrobusinessFormOfAssistance = replace_na(MicrobusinessFormOfAssistance, 'Unknown'),
FinancialServices = replace_na(FinancialServices, 'Unknown'),
Training = replace_na(Training, 'Unknown'),
SocialSupport = replace_na(SocialSupport, 'Unknown'),
MaterialAssistance = replace_na(MaterialAssistance, 'Unknown'),
MedicalSupport = replace_na(MedicalSupport, 'Unknown'),
PsychosocialSupport = replace_na(PsychosocialSupport, 'Unknown'),
) %>%
# DROP VARIABLES
select(-c(VOTs, UMINOR, HealthCondition, CounsellingStatus, EconomicSupport,
JobPlacement, Microbusiness, ChildCare, Education, Housing,
LegalServices, SocialProtectionSchemes, Microbusinesslevel,
MicrobusinessDeliveredBy)
)
# After
rss_slim %>% group_by(FinancialServices) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
dim(rss_slim) # 1,385 x 20 (14 columns less, as expected)
# NA
colSums(is.na(rss_slim))
str(rss_slim)
# Outliers; fill NA in numeric variables
# Variables to process
# Age (years)
# Not computed
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(rss_slim$age)) # 0
# Print levels before
rss_slim %>% group_by(age) %>% summarise(count = n()) %>% print(n=58)
# Convert to number
rss_slim$age  <- as.numeric(rss_slim$age)
# Print levels after
rss_slim %>% group_by(age) %>% summarise(count = n()) %>% print(n=58) # all good
# Check NA count after
sum(is.na(rss_slim$age)) # 0, all good
# Summarise
summary(rss_slim$age) # median = 28, min = 0, max = 300
# First we'll convert some values that are obvious mistakes to NA
rss_slim[rss_slim$age < 14 | rss_slim$age > 100, 'age']  <- NA
length(rss_slim[rss_slim$age < 14 | rss_slim$age > 100, 'age']) # 19
# We should now have 19 NA
sum(is.na(rss_slim$age)) # 19 as expected
# Let's re-summarise
summary(rss_slim$age)
# And let's store the median
q_median <- median(rss_slim$age, na.rm = TRUE)
q_median # 28 years old
# Although age has outliers, it seems reasonably distributed
# We'll therefore do not replace outliers, but simply replace all NA
# with the median
rss_slim[is.na(rss_slim$age), 'age']  <- q_median
# Let's re-summarise
summary(rss_slim$age) # median still 28
# We should now have 0 NA
sum(is.na(rss_slim$age)) # 0 as expected
# migration_duration (years)
# Not computed
# Warning, I wonder if some answers are not weeks instead of years!!!
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(rss_slim$migration_duration)) # 0
# Print levels before
rss_slim %>% group_by(migration_duration) %>% summarise(count = n()) %>% print(n=49)
# Convert to number
rss_slim$migration_duration  <- as.numeric(rss_slim$migration_duration)
# Print levels after
rss_slim %>% group_by(migration_duration) %>% summarise(count = n()) %>% print(n=49) # all good
# Check NA count after
sum(is.na(rss_slim$migration_duration)) # 0, all good
# First, we'll replace these 7 values, which are mistakes and not outliers,
# with NA
sort(rss_slim[rss_slim$migration_duration > 100, "migration_duration"])
rss_slim[rss_slim$migration_duration > 100, "migration_duration"]  <- NA
# Summarise
summary(rss_slim$migration_duration) # median = 2, min 0, max 86, NA 7, all as expected
# Let's store the median
q_median <- median(rss_slim$migration_duration, na.rm = TRUE)
q_median # 2 years
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$migration_duration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$migration_duration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$migration_duration < lower_bound | rss_slim$migration_duration > upper_bound)
length(rss_slim[outlier_ind, "migration_duration"]) # 12 outliers,
sort(rss_slim[outlier_ind, "migration_duration"]) # with smallest being 60 years
# Replace 18 extreme outliers with median
rss_slim[outlier_ind, "migration_duration"] <- q_median
# Re-summarise
summary(rss_slim$migration_duration) # median still 2, max 48 years as expected
# We should still have the same number of NA
sum(is.na(rss_slim$migration_duration)) # 7 --> as expected
# And we will also replace them with the median
rss_slim[is.na(rss_slim$migration_duration), "migration_duration"] <- q_median
# Re-summarise
summary(rss_slim$migration_duration) # median still 2, max still 48
# No NA should remain
sum(is.na(rss_slim$migration_duration)) # 0, all good
#######################################################
# TrainingDuration (days)
# Computed from Mimosa:
# TrainingEndDate - TrainingStartDate
# Summarise
summary(rss_slim$TrainingDuration) # median = 4, min 0, max 167, NA 770
# NA
sum(is.na(rss_slim$TrainingDuration)) # 770
# We have 770 NA. Logically, all these NA should be people who did not receive
# training or that we recoded as Unknown above. Let's check
rss_slim %>% group_by(Training) %>% summarise(count = n())
# No         581
# Unknown    189
# Yes        615
# That is the case, however, we cannot be sure that the Unknown received no training!
# But we decide to recode all these 770 cases as 0 days of training, which will need
# to be reported (i.e., 189 Unknown were recoded to 0 days).
# Another thing we need to check is that no people who receive training are NA or have
# 0 days of training. Let's check:
dim(rss_slim[rss_slim$Training == 'Yes' & rss_slim$TrainingDuration == 0 & !is.na(rss_slim$TrainingDuration), c('Training', 'TrainingDuration')]) # 115
# Unfortunatly, we have 115 respondents who stated they received training, but have 0
# days of training.
# So what we'll do is this. We will add one day to all respondents, and code the NA as
# 0, like this, we'll still be able to differentiate between No training and training.
# This too will need to be reported.
rss_slim$TrainingDuration <- rss_slim$TrainingDuration + 1
# Re-summarise
summary(rss_slim$TrainingDuration) # median = 4, min now 1, max now 168, NA still 770,
# all as expected
# We will now check for outliers. We will replace NA with 0 after this, because doing it
# now would change the median to 0, which would be incorrect for those outliers who did
# received training.
# Also, we will use the median before adding the ones, since this seems more adequate.
# Let's store the median
q_median <- 4 # exception, from above
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$TrainingDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$TrainingDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$TrainingDuration < lower_bound | rss_slim$TrainingDuration > upper_bound)
length(rss_slim[outlier_ind, "TrainingDuration"]) # 7 outliers,
sort(rss_slim[outlier_ind, "TrainingDuration"]) # with smallest being 83 days
# Replace 7 extreme outliers with first median
rss_slim[outlier_ind, "TrainingDuration"] <- q_median
# Re-summarise
summary(rss_slim$TrainingDuration) # median = 5, min still 1, max 74 as expected, NA still 770,
# all as expected
# Note median is now 5 (not 4), because of the added ones. That said, we replaced the values of
# outliers with the original median, 4
# Let us now finally code all the NA as 0 days:
rss_slim <- rss_slim %>% mutate(TrainingDuration = replace_na(TrainingDuration, 0))
# Re-check NA
sum(is.na(rss_slim$TrainingDuration)) # 0 as expected
# Re-summarise
summary(rss_slim$TrainingDuration) # median is now 0 (as expected), min is 0 (as expected),
# and max is still 74
# Let's plot our final distribution
boxplot(rss_slim$TrainingDuration,
ylab = "Days",
main = "TrainingDuration"
)
# Skewed to 0, but better than losing all these observations, I guess, and difficult to
# do better given inconsistency in the data mentioned above.
#######################################################
# MBSupportDuration (days)
# Computed from Mimosa:
# MicrobusinessEndDate - ArrivalDate
# Summarise
summary(rss_slim$MBSupportDuration) # median = 121, min -191 (!), max 1658, NA 203
# NA
sum(is.na(rss_slim$MBSupportDuration)) # 203
# First, investigate negative numbers
rss_slim[rss_slim$MBSupportDuration <= 0 & !is.na(rss_slim$MBSupportDuration), "MBSupportDuration"]
# There is only one, which we will convert to NA
rss_slim[rss_slim$MBSupportDuration <= 0 & !is.na(rss_slim$MBSupportDuration), "MBSupportDuration"]  <- NA
# Re-summarise
summary(rss_slim$MBSupportDuration) # median now 122, min now 2, max still 1658, NA now 204, all
# Let's store the median
q_median <- 121.5 # exception, from above
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$MBSupportDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$MBSupportDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$MBSupportDuration < lower_bound | rss_slim$MBSupportDuration > upper_bound)
length(rss_slim[outlier_ind, "MBSupportDuration"]) # 7 outliers,
length(rss_slim[outlier_ind, "MBSupportDuration"]) # 12 outliers,
sort(rss_slim[outlier_ind, "MBSupportDuration"]) # with smallest being 83 days
# Replace 7 extreme outliers with first median
rss_slim[outlier_ind, "MBSupportDuration"] <- q_median
# Re-summarise
summary(rss_slim$MBSupportDuration)
rss_slim <- rss_slim %>% mutate(MBSupportDuration = replace_na(MBSupportDuration, 0))
# Re-check NA
sum(is.na(rss_slim$MBSupportDuration)) # 0 as expected
# Re-summarise
summary(rss_slim$MBSupportDuration) # median is now 0 (as expected), min is 0 (as expected),
boxplot(rss_slim$MBSupportDuration,
ylab = "Days",
main = "MBSupportDuration"
)
