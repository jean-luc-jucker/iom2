select(-c(VOTs, UMINOR, HealthCondition, CounsellingStatus, EconomicSupport,
JobPlacement, Microbusiness, ChildCare, Education, Housing,
LegalServices, SocialProtectionSchemes, Microbusinesslevel,
MicrobusinessDeliveredBy)
)
# After (print any)
#rss_slim %>% group_by(FinancialServices) %>% summarise(count = n()) %>%
#  mutate(percent = count/sum(count)*100) %>% arrange(-percent)
dim(rss_slim) # 1,385 x 20 (14 columns less, as expected)
# Outliers; fill NA in numeric variables
# Variables to process
# Age (years)
# Not computed
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(rss_slim$age)) # 0
# Print levels before
rss_slim %>% group_by(age) %>% summarise(count = n()) %>% print(n=58)
# Convert to number
rss_slim$age  <- as.numeric(rss_slim$age)
# Print levels after
rss_slim %>% group_by(age) %>% summarise(count = n()) %>% print(n=58) # all good
# Check NA count after
sum(is.na(rss_slim$age)) # 0, all good
# Summarise
summary(rss_slim$age) # median = 28, min = 0, max = 300
# First we'll convert some values that are obvious mistakes to NA
rss_slim[rss_slim$age < 14 | rss_slim$age > 100, 'age']  <- NA
length(rss_slim[rss_slim$age < 14 | rss_slim$age > 100, 'age']) # 19
# We should now have 19 NA
sum(is.na(rss_slim$age)) # 19 as expected
# Let's re-summarise
summary(rss_slim$age)
# And let's store the median
q_median <- median(rss_slim$age, na.rm = TRUE)
q_median # 28 years old
# Although age has outliers, it seems reasonably distributed
# We'll therefore do not replace outliers, but simply replace all NA
# with the median
rss_slim[is.na(rss_slim$age), 'age']  <- q_median
# Let's re-summarise
summary(rss_slim$age) # median still 28
# We should now have 0 NA
sum(is.na(rss_slim$age)) # 0 as expected
# migration_duration (years)
# Not computed
# Warning, I wonder if some answers are not weeks instead of years!!!
# To be converted to num first
# Conversion might coerce to NA; check NA count before
sum(is.na(rss_slim$migration_duration)) # 0
# Print levels before
rss_slim %>% group_by(migration_duration) %>% summarise(count = n()) %>% print(n=49)
# Convert to number
rss_slim$migration_duration  <- as.numeric(rss_slim$migration_duration)
# Print levels after
rss_slim %>% group_by(migration_duration) %>% summarise(count = n()) %>% print(n=49) # all good
# Check NA count after
sum(is.na(rss_slim$migration_duration)) # 0, all good
# First, we'll replace these 7 values, which are mistakes and not outliers,
# with NA
sort(rss_slim[rss_slim$migration_duration > 100, "migration_duration"])
rss_slim[rss_slim$migration_duration > 100, "migration_duration"]  <- NA
# Summarise
summary(rss_slim$migration_duration) # median = 2, min 0, max 86, NA 7, all as expected
# Let's store the median
q_median <- median(rss_slim$migration_duration, na.rm = TRUE)
q_median # 2 years
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$migration_duration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$migration_duration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$migration_duration < lower_bound | rss_slim$migration_duration > upper_bound)
length(rss_slim[outlier_ind, "migration_duration"]) # 12 outliers,
sort(rss_slim[outlier_ind, "migration_duration"]) # with smallest being 60 years
# Replace 18 extreme outliers with median
rss_slim[outlier_ind, "migration_duration"] <- q_median
# Re-summarise
summary(rss_slim$migration_duration) # median still 2, max 48 years as expected
# We should still have the same number of NA
sum(is.na(rss_slim$migration_duration)) # 7 --> as expected
# And we will also replace them with the median
rss_slim[is.na(rss_slim$migration_duration), "migration_duration"] <- q_median
# Re-summarise
summary(rss_slim$migration_duration) # median still 2, max still 48
# No NA should remain
sum(is.na(rss_slim$migration_duration)) # 0, all good
# TrainingDuration (days)
# Computed from Mimosa:
# TrainingEndDate - TrainingStartDate
# Summarise
summary(rss_slim$TrainingDuration) # median = 4, min 0, max 167, NA 770
# NA
sum(is.na(rss_slim$TrainingDuration)) # 770
# We have 770 NA. Logically, all these NA should be people who did not receive
# training or that we recoded as Unknown above. Let's check
rss_slim %>% group_by(Training) %>% summarise(count = n())
# No         581
# Unknown    189
# Yes        615
# That is the case, however, we cannot be sure that the Unknown received no training!
# But we decide to recode all these 770 cases as 0 days of training, which will need
# to be reported (i.e., 189 Unknown were recoded to 0 days).
# Another thing we need to check is that no people who receive training are NA or have
# 0 days of training. Let's check:
dim(rss_slim[rss_slim$Training == 'Yes' & rss_slim$TrainingDuration == 0 & !is.na(rss_slim$TrainingDuration), c('Training', 'TrainingDuration')]) # 115
# Unfortunatly, we have 115 respondents who stated they received training, but have 0
# days of training.
# So what we'll do is this. We will add one day to all respondents, and code the NA as
# 0, like this, we'll still be able to differentiate between No training and training.
# This too will need to be reported.
rss_slim$TrainingDuration <- rss_slim$TrainingDuration + 1
# Re-summarise
summary(rss_slim$TrainingDuration) # median = 4, min now 1, max now 168, NA still 770,
# all as expected
# We will now check for outliers. We will replace NA with 0 after this, because doing it
# now would change the median to 0, which would be incorrect for those outliers who did
# received training.
# Also, we will use the median before adding the ones, since this seems more adequate.
# Let's store the median
q_median <- 4 # exception, from above
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$TrainingDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$TrainingDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$TrainingDuration < lower_bound | rss_slim$TrainingDuration > upper_bound)
length(rss_slim[outlier_ind, "TrainingDuration"]) # 7 outliers,
sort(rss_slim[outlier_ind, "TrainingDuration"]) # with smallest being 83 days
# Replace 7 extreme outliers with first median
rss_slim[outlier_ind, "TrainingDuration"] <- q_median
# Re-summarise
summary(rss_slim$TrainingDuration) # median = 5, min still 1, max 74 as expected, NA still 770,
# all as expected
# Note median is now 5 (not 4), because of the added ones. That said, we replaced the values of
# outliers with the original median, 4
# Let us now finally code all the NA as 0 days:
rss_slim <- rss_slim %>% mutate(TrainingDuration = replace_na(TrainingDuration, 0))
# Re-check NA
sum(is.na(rss_slim$TrainingDuration)) # 0 as expected
# Re-summarise
summary(rss_slim$TrainingDuration) # median is now 0 (as expected), min is 0 (as expected),
# and max is still 74
# Let's plot our final distribution
boxplot(rss_slim$TrainingDuration,
ylab = "Days",
main = "TrainingDuration"
)
# Skewed to 0, but better than losing all these observations, I guess, and difficult to
# do better given inconsistency in the data mentioned above.
# MBSupportDuration (days)
# Computed from Mimosa:
# MicrobusinessEndDate - ArrivalDate
# Summarise
summary(rss_slim$MBSupportDuration) # median = 121.5, min -191 (!), max 1658, NA 203
# NA
sum(is.na(rss_slim$MBSupportDuration)) # 203
# First, investigate negative numbers
rss_slim[rss_slim$MBSupportDuration <= 0 & !is.na(rss_slim$MBSupportDuration), "MBSupportDuration"]
# There is only one, which we will convert to NA
rss_slim[rss_slim$MBSupportDuration <= 0 & !is.na(rss_slim$MBSupportDuration), "MBSupportDuration"]  <- NA
# Re-summarise
summary(rss_slim$MBSupportDuration) # median now 122, min now 2, max still 1658, NA now 204, all
# as expected
# As for TrainingDuration, we will replace the NA with 0. That said, we do not have the same
# issue concerning respondents who received training with 0 days.
# Again, we'll do the change after spotting outliers.
# Let's store the median
q_median <- 121.5 # exception, from above
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$MBSupportDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$MBSupportDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$MBSupportDuration < lower_bound | rss_slim$MBSupportDuration > upper_bound)
length(rss_slim[outlier_ind, "MBSupportDuration"]) # 12 outliers,
sort(rss_slim[outlier_ind, "MBSupportDuration"]) # with smallest being 384 days
# Replace 7 extreme outliers with first median
rss_slim[outlier_ind, "MBSupportDuration"] <- q_median
# Re-summarise
summary(rss_slim$MBSupportDuration) # median still 121.5, min still 2, max now 383, NA still 204,
# all as expected
# Let us now finally code all the NA as 0 days:
rss_slim <- rss_slim %>% mutate(MBSupportDuration = replace_na(MBSupportDuration, 0))
# Re-check NA
sum(is.na(rss_slim$MBSupportDuration)) # 0 as expected
# Re-summarise
summary(rss_slim$MBSupportDuration) # median is now 96, min is now 0,
# and max is still 383
# Let's plot our final distribution
boxplot(rss_slim$MBSupportDuration,
ylab = "Days",
main = "MBSupportDuration"
)
# Looking quite good.
# MBAssistanceDuration (days)
# Computed from Mimosa and Kobo
# interview_date [Kobo] - MicrobusinessEndDate [Mimosa]
# Summarise
summary(rss_slim$MBAssistanceDuration) # median = 169, min -146 (!), max 1951, NA 201
# NA
sum(is.na(rss_slim$MBAssistanceDuration)) # 201
# These 201 NA corresponds to the count of people who received Microbusiness assistance,
# from above:
#Microbusiness
# Yes            1184
# NA              189
# No               12
# 189 + 12 = 201
# We cannot be sure that the NA received no assistance, that said, similarly to what we done
# for TrainingDuration, we'll recode them as 0 after spotting outliers.
# We also need to investigate the negative numbers
rss_slim[rss_slim$MBAssistanceDuration <= 0 & !is.na(rss_slim$MBAssistanceDuration), "MBAssistanceDuration"]
length(rss_slim[rss_slim$MBAssistanceDuration <= 0 & !is.na(rss_slim$MBAssistanceDuration), "MBAssistanceDuration"]) # 52
# Also print levels, since there seems to be zeros
#rss_slim %>% group_by(MBAssistanceDuration) %>% summarise(count = n()) %>% print(n=351) # there
# are 2 zeros, which we will ignore; run only if needed
# There are 52 of them. That said, these should not be converted to NA, since we know the
# NA are already all accounted above. We'll replace them with the median after computing the
# median without taking account of them
# The first thing we need to do is compute the median without taking into account the zeros
length(rss_slim[rss_slim$MBAssistanceDuration > 0, "MBAssistanceDuration"]) # 1333, which is
# 1385 - 52 indeed
# Store median
q_median <- median(rss_slim[rss_slim$MBAssistanceDuration > 0, "MBAssistanceDuration"], na.rm = TRUE)
q_median
# 174.5, which is slightly higher than above (since we do not take into account zeros), indeed
# Replace 52 negative numbers with the median
rss_slim[rss_slim$MBAssistanceDuration <= 0 & !is.na(rss_slim$MBAssistanceDuration), "MBAssistanceDuration"] <- q_median
# Check no negative values remain
length(rss_slim[rss_slim$MBAssistanceDuration <= 0 & !is.na(rss_slim$MBAssistanceDuration), "MBAssistanceDuration"]) # 0 indeed
# Check NA is still 201
sum(is.na(rss_slim$MBAssistanceDuration)) # 201 indeed
# Resummarize
summary(rss_slim$MBAssistanceDuration) # median now 174.5, min now 1, max still 1951, all as expected
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(rss_slim$MBAssistanceDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(rss_slim$MBAssistanceDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(rss_slim$MBAssistanceDuration < lower_bound | rss_slim$MBAssistanceDuration > upper_bound)
length(rss_slim[outlier_ind, "MBAssistanceDuration"]) # 21 outliers,
sort(rss_slim[outlier_ind, "MBAssistanceDuration"]) # with smallest being 1 days or 381 days
# We don't want to get rid of lower bound outliers, but only upper bound outliers.
# So we do:
outlier_ind <- which(rss_slim$MBAssistanceDuration > upper_bound) # only take upper bound
length(rss_slim[outlier_ind, "MBAssistanceDuration"]) # 10 outliers (as expected),
sort(rss_slim[outlier_ind, "MBAssistanceDuration"]) # with smallest still 381 days
# Replace 10 extreme outliers with first median
rss_slim[outlier_ind, "MBAssistanceDuration"] <- q_median
# Re-summarise
summary(rss_slim$MBAssistanceDuration) # median still 174.5, min still 1, max now 377, NA still 201,
# all as expected
# Let us now finally code all the NA as 0 days:
rss_slim <- rss_slim %>% mutate(MBAssistanceDuration = replace_na(MBAssistanceDuration, 0))
# Re-check NA
sum(is.na(rss_slim$MBAssistanceDuration)) # 0 as expected
# Re-summarise
summary(rss_slim$MBAssistanceDuration) # median is now 158, min is now 0,
# and max is still 377, all as expected
# Let's plot our final distribution
boxplot(rss_slim$MBAssistanceDuration,
ylab = "Days",
main = "MBAssistanceDuration"
)
# Looking very good.
# Data types check
str(rss_slim) # all good
# Final NA check
colSums(is.na(rss_slim)) # all good
# NEW: Add count of services received
# Services are any of:
names(rss_slim)
# "Training"
# "SocialSupport"
# "MaterialAssistance"
# "MedicalSupport"
# "PsychosocialSupport"
# Note, all respondents have received microbusiness assistance, so we'll add 1
# everywhere. Our measure should therefore range from 1 to 6
# Note, "FinancialServices" is not counted since it is not assistance per se
# according to the client (note of CG in PPT), but rather, an assistance form
rss_slim$AssistanceCount <- str_count(rss_slim$Training, 'Yes') +
str_count(rss_slim$SocialSupport, 'Yes') +
str_count(rss_slim$MaterialAssistance, 'Yes') +
str_count(rss_slim$MedicalSupport, 'Yes') +
str_count(rss_slim$PsychosocialSupport, 'Yes') + 1
# Export slim recoded data
write_excel_csv(rss_slim, 'data_clean/rss_slim_recoded.csv')
# RDS version
saveRDS(rss_slim, file = 'data_clean/rss_slim_recoded.rds')
# Final size
dim(rss_slim) # 1,385 x 21, i.e., 1 more var as expected
summary(rss_slim$AssistanceCount)
getwd()
library(tidyverse)
library(ggplot2)
library(GGally)
# Load res object as df, and convert strings to factors
df <- readRDS('data_clean/rss_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(df) # 1,385 x 21
# Discard unplottable variables
df <- df %>% select(-c(ID))
dim(df)
df <- df %>% rename(Country=origin_country) %>%
select(Country, EconomicScore, CompositeScore) %>%
group_by(Country) %>%
summarise(Count = n(),
"Economic Score" = mean(EconomicScore),
"Composite Score" = mean(CompositeScore)
)
df$Country <- fct_reorder(df$Country, df$`Composite Score`)
plot <- df %>% pivot_longer(-c(Country, Count), names_to = 'Dimension', values_to = 'Score')
plot
ggplot(plot, aes(fill= fct_rev(Dimension), y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
ggplot(plot, aes(fill= fct_rev(Dimension), y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'bottom',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
getwd()
library(readxl)
library(tidyverse)
# Load res object as df, and convert strings to factors
df <- readRDS('data_clean/res_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(df) # 2,026 x 33
# Discard unplottable variables
df <- df %>% select(-c(MimosaID, InterviewDate))
dim(df)
df
df %>% group_by(Country) %>% summarise(count = n())
bs <- df %>%
select(Country, BusinessSuccess) %>%
add_count(Country) %>%
filter(BusinessSuccess =='High')  %>%
group_by(Country, n) %>%
summarise(Count = n()) %>%
mutate(`High Business Success` = Count/n) %>%
select(Country, `High Business Success`)
bs
bp <- df %>%
select(Country, BusinessProfitability) %>%
add_count(Country) %>%
filter(BusinessProfitability =='High')  %>%
group_by(Country, n) %>%
summarise(Count = n()) %>%
mutate(`High Business Profitability` = Count/n) %>%
select(Country, `High Business Profitability`)
bp
plot <- merge(bs, bp, by='Country')
plot
plot$Country <- fct_reorder(plot$Country, plot$`High Business Success`)
plot
plot <- plot %>% pivot_longer(-Country, names_to = 'Dimension', values_to = 'Score')
plot
ggplot(plot, aes(fill= Dimension, y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
scale_y_continuous(labels = scales::percent)+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
ggplot(plot, aes(fill= Dimension, y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
scale_y_continuous(labels = scales::percent)+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'bottom',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
ggplot(plot, aes(fill= Dimension, y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
scale_y_continuous(labels = scales::percent)+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'top',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
getwd()
library(tidyverse)
library(ggplot2)
library(GGally)
# Load res object as df, and convert strings to factors
df <- readRDS('data_clean/rss_slim.rds')%>%
mutate(across(where(is.character), as.factor))
dim(df) # 1,385 x 21
# Discard unplottable variables
df <- df %>% select(-c(ID))
dim(df)
# Correlations
# Subset to RSS vars
#df <- df %>% select(
#  EconomicScore, SocialScore, PsychoSocialScore, CompositeScore
#)
#cor(df)
#theme_set(theme_light())
#ggpairs(df)
#ggpair
#summary(df$CompositeScore)
# RSS scores by country
df <- df %>% rename(Country=origin_country) %>%
select(Country, EconomicScore, CompositeScore) %>%
group_by(Country) %>%
summarise(Count = n(),
"Economic Score" = mean(EconomicScore),
"Composite Score" = mean(CompositeScore)
)
df$Country <- fct_reorder(df$Country, df$`Composite Score`)
plot <- df %>% pivot_longer(-c(Country, Count), names_to = 'Dimension', values_to = 'Score')
plot
ggplot(plot, aes(fill= fct_rev(Dimension), y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'right',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
#panel.grid = element_blank())
ggplot(plot, aes(fill= fct_rev(Dimension), y=Score, x= Country, Score)) +
geom_bar(position="dodge", stat = "identity")+
coord_flip()+
guides(fill = guide_legend(reverse = TRUE))+
scale_fill_manual(values = c('#3399FF', 'navyblue'))+
theme_minimal()+
theme(axis.title.y = element_blank(),
axis.title.x = element_blank(),
#axis.text.x = element_blank(),
axis.text.y = element_text(colour='black', size = 18),
axis.text.x = element_text(colour='black', size = 18),
#axis.title.x = element_text(colour='black', size = 16),
legend.position = 'top',
#legend.position = c(0.95, 1.05),
legend.title = element_blank(),
legend.text = element_text(size = 18),
plot.margin = margin(r=25, l=1, b=0, t=1),
plot.title = element_text(size = 18),
plot.subtitle = element_text(size = 18))
