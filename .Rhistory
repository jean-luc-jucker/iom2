sum(duplicated(df)) # 0
# Previously 0
# Pseudo
sum(duplicated(df$MimosaID)) # 132
# Previously 95
df[duplicated(df$MimosaID), 'MimosaID'] %>% print(n = 132)
# Note, they are all NA, as expected
# Data types
str(df)
# MigrationDuration     chr --> needs to be converted *
# TimeToReceiveSupport  chr --> needs to be converted # no longer exists
# SupportDuration       num # no longer exists
# TrainingDuration      num # no longer exists
# Check levels before
df %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n = 33) # --> all are numbers,
# with also 114 NA, which we'll convert to median later
# Converting to numeric could produce NA
# Print before
colSums(is.na(df))
# MigrationDuration     114
# Character to Numeric
df$MigrationDuration <- as.numeric(df$MigrationDuration)
# Print after
colSums(is.na(df))
# MigrationDuration     still 114, all good
# Check levels after
df %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n = 29) # --> we see, e.g.,
# that count of 3 is 255, which are the 253 3 plus 2 03 from above
# Recode dependent variables
# Print levels
levels(as.factor(df$BusinessSucess))
levels(as.factor(df$BusinessProfitability))
levels(as.factor(df$WouldMigrateAgain))
# Print counts
df %>% group_by(BusinessSucess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df <- df %>% mutate(
BusinessSucess =
case_when(BusinessSucess == 'Actuellement ouvert et les activités marchent bien' ~ 'High',
BusinessSucess != 'Actuellement ouvert et les activités marchent bien' ~ 'Low'),
BusinessProfitability =
case_when(BusinessProfitability == 'Oui' ~ 'High',
BusinessProfitability != 'Oui' ~ 'Low'),
WouldMigrateAgain =
case_when(WouldMigrateAgain == 'Non' ~ 'No',
WouldMigrateAgain != 'Non' ~ 'Yes')
)
# Reprint counts
df %>% group_by(BusinessSucess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
# Assess NA
colSums(is.na(df))
# Recode Independent variables
# Principles:
# Answers who represent less than 10% of all answers are grouped together
# Exceptions:
# - Disabled, with 95% Non and 5% Yes, is kept as is
# - MicroBusinessLevel, we kept Collective and Individual together (7.29%),
# Since removing them would mean not being able to use this variable at
# all
# - EmployeeNumber, we kept 1+ employee (160) to be able to make at least
# one comparison
colSums(is.na(df))
# Before
df %>% group_by(FirstChoice) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent) %>% print(n=21)
df <- df %>% mutate(
# RECODE
InterviewType =
case_when(InterviewType == 'Par téléphone' ~ 'Par téléphone',
InterviewType != 'Par téléphone' ~ 'Terrain/bureau OIM'
),
Country =
case_when(
Country != "Sénégal" & Country != "Guinée" & Country != "Côte D'Ivoire" & Country != "Burkina Faso" & Country != "Ghana" ~ 'Autre',
TRUE ~ as.character(Country)
),
CountryOfReturn =
case_when(
CountryOfReturn != "Lybie" & CountryOfReturn != "Algerie" & CountryOfReturn != "Niger" & CountryOfReturn != "Maroc" ~ 'Autre',
TRUE ~ as.character(CountryOfReturn)
),
Gender =
case_when(
Gender == "Masculin"  ~ "Masculin",
Gender == "Féminin" ~ "Féminin" # we purposefully do not specify Refused, to convert
# it to a NA
),
AgeGroup =
case_when(
AgeGroup == "18-35 ans" ~ "14-35",
AgeGroup == "36-65 ans" ~ "36+",
AgeGroup == "14-17 ans" ~ "14-35",
AgeGroup == "+65 ans" ~ "36+"
),
BusinessType =
case_when(
BusinessType == "Commerce" ~ "Commerce",
BusinessType == "Elevage" ~ "Elevage",
BusinessType == "Transport (Moto - Auto et autres)" ~ "Transport",
BusinessType == "Agriculture" ~ "Agriculture/aviculture",
BusinessType == "Aviculture" ~ "Agriculture/aviculture",
BusinessType == "Artisan-Ouvrier" ~ "Autre",
BusinessType == "Couture" ~ "Autre",
BusinessType == "Autre" ~ "Autre",
BusinessType == "Restauration" ~ "Autre",
BusinessType == "Bâtiment/construction" ~ "Autre",
BusinessType == "Coiffure" ~ "Autre",
BusinessType == "Mécanique" ~ "Autre",
BusinessType == "Pêche" ~ "Autre"
),
BusinessMembers =
case_when(BusinessMembers != "Moi uniquement" ~ "Moi et d'autres",
TRUE ~ as.character(BusinessMembers)
),
ReceivedIOMBusinessAdvice =
case_when(
ReceivedIOMBusinessAdvice == "Non"  ~ "Non",
ReceivedIOMBusinessAdvice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Ne sait pas and Refused to NA
),
BusinessHasEmployees =
case_when(
BusinessHasEmployees == "Non"  ~ "Non",
BusinessHasEmployees == "Oui" ~ "Autre",
BusinessHasEmployees == "Souhaite ne pas répondre" ~ "Autre" # group Oui
# and Refused to avoid losing 124 respondents
),
EmployeeNumber =
case_when(EmployeeNumber == "1" ~ "1",
EmployeeNumber == "2" ~ "1+",
EmployeeNumber == "4 et plus" ~ "1+",
EmployeeNumber == "3" ~ "1+",
EmployeeNumber == "Ne souhaite pas répondre" ~ "1", # we know that
# the 6 respondents who Refused to answer replied to the previous
# question (BusinessHasEmployees) that they have employees. We decide
# to replace the refused with the most common value for respondents
# who have employees, that is, 1
),
CoronaImpactOnBusiness =
case_when(CoronaImpactOnBusiness != "Non" ~ "Oui",
TRUE ~ as.character(CoronaImpactOnBusiness)
),
FirstChoice =
case_when(
FirstChoice == "Non"  ~ "Non",
FirstChoice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Refused to NA
)
) %>%
# REPLACE NA
mutate(BusinessHasEmployees = replace_na(BusinessHasEmployees, "Autre"), # to avoid
# losing 124 respondents
EmployeeNumber = replace_na(EmployeeNumber, "0") # All NA are for respondents
# who do not have employees, so we can replace NA with 0
)
# After
df %>% group_by(FirstChoice) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
# Main difference from all previous versions: We no longer do a merge, and use only
# Kobo data, following discussion with client. All training variables are dropped.
getwd()
library(readxl)
library(tidyverse)
# Reintegration Economic Survey ####
res <- read_excel('data_raw/RE_Economic_Survey_clean for data analysis_final.xlsx',
na = c('N/A', 'NA', 'na'))
warnings()
dim(res) #   2,073 x 154
# Previously 2,001 x 154
# Subset ####
df <- res %>%
select(
# Metadata
"Identifiant MiMOSA du cas bis",
"Date de l'enquête",
"Mode d'enquête",
# Dependent variables
"Comment se porte votre entreprise ou business actuellement ?",
"L’entreprise vous permet -elle de gagner assez d’argent pour subvenir à vos besoins et à celle de votre famille ?",
"Avez-vous déjà planifié de migrer de nouveau ?",
"Si vous n’aviez pas bénéficié de l’aide de l’OIM pour votre réintégration économique quelle serait votre situation actuelle ?",
"Pensez-vous que le retour a été une bonne décision ?",
"Êtes-vous satisfait de l’aide à la réintégration de manière globale ?",
# Grouping variables
"Pays",
"Pays d’où le migrant est de retour :",
"Sexe",
"Age (l'enquête est destinée aux personnes agées de 14 ans et plus)",
"Durée de l’absence du pays d’origine   Mettre 0 si moins d'un an",
"Situation de handicap",
"Par quel moyen avez-vous reçu cette assistance économique ?",
"Type de business bis",
"Qui sont les membres de cette entreprise ?",
"L'OIM   ou un de ses partenaires vous a-t-elle formé sur la façon de gérer une entreprise ?",
"L’entreprise emploie-t-elle du personnel ?",
"Si oui, combien des personnes sont employées par votre entreprise ?",
"Est-ce votre entreprise a été affectée par la maladie de Coronavirus ?",
"Est-ce que le type d'assistance économique que vous avez reçu correspondait à votre premier choix ?"
) %>%
rename(
# Metadata
"MimosaID" =
"Identifiant MiMOSA du cas bis",
"InterviewDate" =
"Date de l'enquête",
"InterviewType" =
"Mode d'enquête",
# Dependent variables
"BusinessSucess" =
"Comment se porte votre entreprise ou business actuellement ?",
"BusinessProfitability" =
"L’entreprise vous permet -elle de gagner assez d’argent pour subvenir à vos besoins et à celle de votre famille ?",
"WouldMigrateAgain" =
"Avez-vous déjà planifié de migrer de nouveau ?",
"SituationWithoutSupport" =
"Si vous n’aviez pas bénéficié de l’aide de l’OIM pour votre réintégration économique quelle serait votre situation actuelle ?",
"ReturningWasGoodDecision" =
"Pensez-vous que le retour a été une bonne décision ?",
"SatisfiedWithReintegrationSupport" =
"Êtes-vous satisfait de l’aide à la réintégration de manière globale ?",
# Grouping variables
"Country" =
"Pays",
"CountryOfReturn" =
"Pays d’où le migrant est de retour :",
"Gender" =
"Sexe",
"AgeGroup" =
"Age (l'enquête est destinée aux personnes agées de 14 ans et plus)",
"MigrationDuration" =
"Durée de l’absence du pays d’origine   Mettre 0 si moins d'un an",
"Disabled" =
"Situation de handicap",
"ReceivedSupportAs" =
"Par quel moyen avez-vous reçu cette assistance économique ?",
"BusinessType" =
"Type de business bis",
"BusinessMembers" =
"Qui sont les membres de cette entreprise ?",
"ReceivedIOMBusinessAdvice" =
"L'OIM   ou un de ses partenaires vous a-t-elle formé sur la façon de gérer une entreprise ?",
"BusinessHasEmployees" =
"L’entreprise emploie-t-elle du personnel ?",
"EmployeeNumber" =
"Si oui, combien des personnes sont employées par votre entreprise ?",
"CoronaImpactOnBusiness" =
"Est-ce votre entreprise a été affectée par la maladie de Coronavirus ?",
"FirstChoice" =
"Est-ce que le type d'assistance économique que vous avez reçu correspondait à votre premier choix ?"
) %>%
# Filter out NL countries (Togo = 8, Sierra-Leone = 45)
filter(Country != 'Togo' & Country != 'Sierra-Leone')
dim(df) # 2,026 x 23
# Previously 1948 x 32
#view(df)
# NA
colSums(is.na(df))
# Dupes
# Perfect
sum(duplicated(df)) # 0
# Previously 0
# Pseudo
sum(duplicated(df$MimosaID)) # 132
# Previously 95
df[duplicated(df$MimosaID), 'MimosaID'] %>% print(n = 132)
# Note, they are all NA, as expected
# Data types
str(df)
# MigrationDuration     chr --> needs to be converted *
# TimeToReceiveSupport  chr --> needs to be converted # no longer exists
# SupportDuration       num # no longer exists
# TrainingDuration      num # no longer exists
# Check levels before
df %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n = 33) # --> all are numbers,
# with also 114 NA, which we'll convert to median later
# Converting to numeric could produce NA
# Print before
colSums(is.na(df))
# MigrationDuration     114
# Character to Numeric
df$MigrationDuration <- as.numeric(df$MigrationDuration)
# Print after
colSums(is.na(df))
# MigrationDuration     still 114, all good
# Check levels after
df %>% group_by(MigrationDuration) %>% summarise(count = n()) %>% print(n = 29) # --> we see, e.g.,
# that count of 3 is 255, which are the 253 3 plus 2 03 from above
# Recode dependent variables
# Print levels
levels(as.factor(df$BusinessSucess))
levels(as.factor(df$BusinessProfitability))
levels(as.factor(df$WouldMigrateAgain))
# Print counts
df %>% group_by(BusinessSucess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df <- df %>% mutate(
BusinessSucess =
case_when(BusinessSucess == 'Actuellement ouvert et les activités marchent bien' ~ 'High',
BusinessSucess != 'Actuellement ouvert et les activités marchent bien' ~ 'Low'),
BusinessProfitability =
case_when(BusinessProfitability == 'Oui' ~ 'High',
BusinessProfitability != 'Oui' ~ 'Low'),
WouldMigrateAgain =
case_when(WouldMigrateAgain == 'Non' ~ 'No',
WouldMigrateAgain != 'Non' ~ 'Yes')
)
# Reprint counts
df %>% group_by(BusinessSucess) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(BusinessProfitability) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
df %>% group_by(WouldMigrateAgain) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
# Assess NA
colSums(is.na(df))
# Recode Independent variables
# Principles:
# Answers who represent less than 10% of all answers are grouped together
# Exceptions:
# - Disabled, with 95% Non and 5% Yes, is kept as is
# - MicroBusinessLevel, we kept Collective and Individual together (7.29%),
# Since removing them would mean not being able to use this variable at
# all
# - EmployeeNumber, we kept 1+ employee (160) to be able to make at least
# one comparison
colSums(is.na(df))
# Before
df %>% group_by(CoronaImpactOnBusiness) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent) %>% print(n=21)
df <- df %>% mutate(
# RECODE
InterviewType =
case_when(InterviewType == 'Par téléphone' ~ 'Par téléphone',
InterviewType != 'Par téléphone' ~ 'Terrain/bureau OIM'
),
Country =
case_when(
Country != "Sénégal" & Country != "Guinée" & Country != "Côte D'Ivoire" & Country != "Burkina Faso" & Country != "Ghana" ~ 'Autre',
TRUE ~ as.character(Country)
),
CountryOfReturn =
case_when(
CountryOfReturn != "Lybie" & CountryOfReturn != "Algerie" & CountryOfReturn != "Niger" & CountryOfReturn != "Maroc" ~ 'Autre',
TRUE ~ as.character(CountryOfReturn)
),
Gender =
case_when(
Gender == "Masculin"  ~ "Masculin",
Gender == "Féminin" ~ "Féminin" # we purposefully do not specify Refused, to convert
# it to a NA
),
AgeGroup =
case_when(
AgeGroup == "18-35 ans" ~ "14-35",
AgeGroup == "36-65 ans" ~ "36+",
AgeGroup == "14-17 ans" ~ "14-35",
AgeGroup == "+65 ans" ~ "36+"
),
BusinessType =
case_when(
BusinessType == "Commerce" ~ "Commerce",
BusinessType == "Elevage" ~ "Elevage",
BusinessType == "Transport (Moto - Auto et autres)" ~ "Transport",
BusinessType == "Agriculture" ~ "Agriculture/aviculture",
BusinessType == "Aviculture" ~ "Agriculture/aviculture",
BusinessType == "Artisan-Ouvrier" ~ "Autre",
BusinessType == "Couture" ~ "Autre",
BusinessType == "Autre" ~ "Autre",
BusinessType == "Restauration" ~ "Autre",
BusinessType == "Bâtiment/construction" ~ "Autre",
BusinessType == "Coiffure" ~ "Autre",
BusinessType == "Mécanique" ~ "Autre",
BusinessType == "Pêche" ~ "Autre"
),
BusinessMembers =
case_when(BusinessMembers != "Moi uniquement" ~ "Moi et d'autres",
TRUE ~ as.character(BusinessMembers)
),
ReceivedIOMBusinessAdvice =
case_when(
ReceivedIOMBusinessAdvice == "Non"  ~ "Non",
ReceivedIOMBusinessAdvice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Ne sait pas and Refused to NA
),
BusinessHasEmployees =
case_when(
BusinessHasEmployees == "Non"  ~ "Non",
BusinessHasEmployees == "Oui" ~ "Autre",
BusinessHasEmployees == "Souhaite ne pas répondre" ~ "Autre" # group Oui
# and Refused to avoid losing 124 respondents
),
EmployeeNumber =
case_when(EmployeeNumber == "1" ~ "1",
EmployeeNumber == "2" ~ "1+",
EmployeeNumber == "4 et plus" ~ "1+",
EmployeeNumber == "3" ~ "1+",
EmployeeNumber == "Ne souhaite pas répondre" ~ "1", # we know that
# the 6 respondents who Refused to answer replied to the previous
# question (BusinessHasEmployees) that they have employees. We decide
# to replace the refused with the most common value for respondents
# who have employees, that is, 1
),
CoronaImpactOnBusiness =
case_when(CoronaImpactOnBusiness != "Non" ~ "Oui",
TRUE ~ as.character(CoronaImpactOnBusiness)
),
FirstChoice =
case_when(
FirstChoice == "Non"  ~ "Non",
FirstChoice == "Oui" ~ "Oui" # TRUE purposefully not
# specified to convert Refused to NA
)
) %>%
# REPLACE NA
mutate(BusinessHasEmployees = replace_na(BusinessHasEmployees, "Autre"), # to avoid
# losing 124 respondents
EmployeeNumber = replace_na(EmployeeNumber, "0") # All NA are for respondents
# who do not have employees, so we can replace NA with 0
)
# After
df %>% group_by(CoronaImpactOnBusiness) %>% summarise(count = n()) %>%
mutate(percent = count/sum(count)*100) %>% arrange(-percent)
# MigrationDuration
# Definition: "Durée de l’absence du pays d’origine   Mettre 0 si moins d'un an"
# In years
# NA
sum(is.na(df$MigrationDuration)) # 110
# Summarise
summary(df$MigrationDuration)
# Check no values are under zero
df[df$MigrationDuration <= 0, "MigrationDuration"] %>% arrange(MigrationDuration) %>%
print(n=541)# 541, with 431 zero and 110 NA
# Check no values are under zero
df[df$MigrationDuration <= 0, "MigrationDuration"] %>% arrange(MigrationDuration) %>%
print(n=565)
# First, we'll replace these 3 values, which are mistakes and not outliers,
# with NA
df[order(df$MigrationDuration, decreasing=TRUE), 'MigrationDuration'][0:3,]
# First, we'll replace these 3 values, which are mistakes and not outliers,
# with NA
df[order(df$MigrationDuration, decreasing=TRUE), 'MigrationDuration'][0:4,]
# First, we'll replace these 3 values, which are mistakes and not outliers,
# with NA
df[order(df$MigrationDuration, decreasing=TRUE), 'MigrationDuration'][0:3,]
df[df$MigrationDuration >= 936 & !is.na(df$MigrationDuration), 'MigrationDuration']  <- NA
sum(is.na(df$MigrationDuration)) # 113 --> as expected
# Let's re-summarise
summary(df$MigrationDuration)
# And let's store the median
q_median <- median(df$MigrationDuration, na.rm = TRUE)
q_median # 2 years
# Boxplot has a function to detect outliers
outliers <- boxplot.stats(df$MigrationDuration)$out
out_ind <- which(df$MigrationDuration %in% c(outliers))
out_ind
# Print outliers
df[out_ind, "MigrationDuration"] %>% arrange(MigrationDuration) # 130, with
# Print outliers
df[out_ind, "MigrationDuration"] %>% arrange(MigrationDuration) # 130, with
# Plot outliers
boxplot(df$MigrationDuration,
ylab = "Years",
main = "MigrationDuration"
)
# Spot outliers using percentile method, with conservative threshold of 0.01/0.99
lower_bound <- quantile(df$MigrationDuration, 0.01, na.rm = TRUE)
upper_bound <- quantile(df$MigrationDuration, 0.99, na.rm = TRUE)
outlier_ind <- which(df$MigrationDuration < lower_bound | df$MigrationDuration > upper_bound)
df[outlier_ind, "MigrationDuration"] %>% arrange(MigrationDuration) # 18, with smallest being 15 years
# Replace 18 extreme outliers with median
df[outlier_ind, "MigrationDuration"] <- q_median
# Re-summarise
summary(df$MigrationDuration) # median still 2, max 14 years as expected
# Replot
outliers <- boxplot.stats(df$MigrationDuration)$out
out_ind <- which(df$MigrationDuration %in% c(outliers))
boxplot(df$MigrationDuration,
ylab = "Years",
main = "MigrationDuration"
)
# It is looking better
# We should still have the same number of NA
sum(is.na(df$MigrationDuration)) # 113 --> as expected
# And we will also replace them with the median
df[is.na(df$MigrationDuration), "MigrationDuration"] <- q_median
# Final summary and plot
summary(df$MigrationDuration) # median still 2, max still 14 years
outliers <- boxplot.stats(df$MigrationDuration)$out
out_ind <- which(df$MigrationDuration %in% c(outliers))
boxplot(df$MigrationDuration,
ylab = "Years",
main = "MigrationDuration"
)
# As above
# Check no NA are remaining
sum(is.na(df$MigrationDuration)) # 0, all good
# Assess NA
colSums(is.na(df))
dim(df)
